/*
 * ProcessDefinitionSelecter.java
 *
 * Created on September 5, 2008, 1:33 PM
 */

package com.sinco.client;

import com.sinco.bpm.workflow.metadata.ProcessDefinition;
import com.sinco.client.controls.RequiredListener;
import com.sinco.network.NetworkException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author  cross
 */
public class ProcessDefinitionSelector extends javax.swing.JPanel {
    private Server currentServer;
    private List<RequiredListener> requiredListeners;
    private MetadataHelper helper;
    
    /** Creates new form ProcessDefinitionSelecter */
    public ProcessDefinitionSelector(Server currentServer) {
        initComponents();
        requiredListeners = new ArrayList<RequiredListener>();
        this.currentServer = currentServer;
        helper = new MetadataHelper(currentServer);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                loadComponents();
            }
        });
    }
    
    public void addRequiredListener(RequiredListener listener) {
        requiredListeners.add(listener);
    }
    
    private void loadComponents() {
        loadProcessDefinitions();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblProcessDefinition = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstDefinitions = new javax.swing.JList();

        setLayout(new java.awt.GridBagLayout());

        lblProcessDefinition.setText("Process Definition:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 4, 4);
        add(lblProcessDefinition, gridBagConstraints);

        lstDefinitions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstDefinitionsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstDefinitions);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 4, 4);
        add(jScrollPane2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void lstDefinitionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDefinitionsValueChanged
    for (RequiredListener listener : requiredListeners) {
        listener.requiredChanged(true);
    }
    
}//GEN-LAST:event_lstDefinitionsValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblProcessDefinition;
    private javax.swing.JList lstDefinitions;
    // End of variables declaration//GEN-END:variables

    private void loadProcessDefinitions() {
        try {
            ProcessDefinition[] processDefinitions = helper.getProcessDefinitions();

            DefaultListModel listModel = new DefaultListModel();
            for (ProcessDefinition def : processDefinitions) {
                ProcessDefinitionVO vo = new ProcessDefinitionVO(def);
                listModel.addElement(vo);
            }

            lstDefinitions.setModel(listModel);
        } catch (UnknownHostException ex) {
            throw new RuntimeException(ex);
        } catch (NetworkException ex) {
            throw new RuntimeException(ex);
        }
    }

    
    private class ProcessDefinitionVO {
        private ProcessDefinition processDefinition;
        
        public ProcessDefinitionVO(ProcessDefinition processDefinition) {
            this.processDefinition = processDefinition;
        }

        @Override
        public String toString() {
            return getProcessDefinition().getDefinitionName();
        }

        public ProcessDefinition getProcessDefinition() {
            return processDefinition;
        }

        public void setProcessDefinition(ProcessDefinition processDefinition) {
            this.processDefinition = processDefinition;
        }
    }
    
    public ProcessDefinition getSelectedProcessDefinition() {
        return ((ProcessDefinitionVO) lstDefinitions.getSelectedValue()).getProcessDefinition();
    }
}
