/*
 * ProcessWizardPanel.java
 *
 * Created on 8 September 2008, 22:48
 */
package com.sinco.client;

import com.sinco.bpm.workflow.metadata.ProcessDefinition;
import com.sinco.cache.CacheFactory;
import com.sinco.client.controls.RequiredListener;
import com.sinco.client.model.ProcessModel;
import com.sinco.client.model.ProcessStatus;
import java.awt.BorderLayout;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author  cross
 */
public class ProcessWizardPanel extends javax.swing.JPanel {

    ProcessModel model;
    JPanel currentPanel;

    /** Creates new form ProcessWizardPanel
     * @param currentServer 
     */
    public ProcessWizardPanel(Server currentServer) {
        initComponents();
        model = new ProcessModel(currentServer);
        initializeProcessSelector(currentServer);
        btnNext.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnNext = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sinco/client/1rightarrow.png"))); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel1.add(btnNext);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sinco/client/fileclose.png"))); // NOI18N
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pnlMain.setLayout(new javax.swing.BoxLayout(pnlMain, javax.swing.BoxLayout.LINE_AXIS));
        add(pnlMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
}//GEN-LAST:event_jButton1ActionPerformed

private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
    if (model.getProcessStatus().equals(ProcessStatus.NOT_STARTED)) {
        ProcessDefinitionSelector selector = (ProcessDefinitionSelector) currentPanel;
        ProcessDefinition processDefinition = selector.getSelectedProcessDefinition();
        model.createInstance(processDefinition);
        pnlMain.remove(selector);
        updateForm();
    } else if (model.getProcessStatus().equals(ProcessStatus.RUNNING)) {
        model.processCurrentToken();
        updateForm();
    }
}//GEN-LAST:event_btnNextActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    private void initializeProcessSelector(Server currentServer) {

        ProcessDefinitionSelector selector = new ProcessDefinitionSelector(currentServer);
        currentPanel = selector;

        selector.addRequiredListener(new RequiredListener() {

            public void requiredChanged(boolean requiredAccomplished) {
                if (requiredAccomplished) {
                    btnNext.setEnabled(true);
                } else {
                    btnNext.setEnabled(false);
                }
            }
        });
        pnlMain.add(selector);
    }

    private void updateForm() {
        try {
            while (pnlMain.getComponents().length > 0) {
                pnlMain.remove(pnlMain.getComponents()[0]);
            }
            if (model.getProcessStatus().equals(ProcessStatus.RUNNING)) {
                Class formClass = model.getCurrentFormId();

                JPanel panel = (JPanel) formClass.newInstance();

                pnlMain.add(panel, BorderLayout.CENTER);
            } else if (model.getProcessStatus().equals(ProcessStatus.CLOSED)) {
                JOptionPane.showMessageDialog(this, "Process closed");
            }
            updateUI();
        } catch (InstantiationException ex) {
            JOptionPane.showMessageDialog(this, "An error ocurred, please contact your administrator and provide the following error code: " + 1);
        } catch (IllegalAccessException ex) {
            JOptionPane.showMessageDialog(this, "An error ocurred, please contact your administrator and provide the following error code: " + 2);
        }
    }
}
