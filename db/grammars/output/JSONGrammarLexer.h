/** \file
 *  This C header file was generated by $ANTLR version 3.0.1
 *
 *     -  From the grammar source file : filter.g
 *     -                            On : 2012-07-12 08:24:19
 *     -                 for the lexer : JSONGrammarLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 * View this file with tabs set to 8 (:set ts=8 in gvim) and indent at 4 (:set sw=4 in gvim)
 *
 * The lexer JSONGrammarLexerhas the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pJSONGrammarLexer, which is returned from a call to JSONGrammarLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the entry points are provided anyway.
 * * The entry points for JSONGrammarLexer are  as follows:
 *
 *  - void      pJSONGrammarLexer->ID(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->INT(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->FLOAT(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->COMMENT(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->WS(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->STRING(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->XPATH(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->EXPONENT(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->HEX_DIGIT(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->ESC_SEQ(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->OCTAL_ESC(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->UNICODE_ESC(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->COMMA(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->LBRAN(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->RBRAN(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->LBRAK(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->RBRAK(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->COLON(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->SEMICOLON(pJSONGrammarLexer)
 *  - void      pJSONGrammarLexer->Tokens(pJSONGrammarLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_JSONGrammarLexer_H
#define _JSONGrammarLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef	WIN32
// Disable: Unreferenced parameter,                - Rules with parameters that are not used
//          constant conditional,                  - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable        - tree rewrite vairables declared but not needed
//          Unreferenced local variable            - lexer rulle decalres but does not always use _type
//          potentially unitialized variable used  - retval always returned from a rule 
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4701 )
#endif



/** Context tracking structure for JSONGrammarLexer
 */
typedef struct JSONGrammarLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

    void (*mID)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mINT)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mFLOAT)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mCOMMENT)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mWS)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mSTRING)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mXPATH)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mEXPONENT)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mHEX_DIGIT)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mESC_SEQ)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mOCTAL_ESC)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mUNICODE_ESC)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mCOMMA)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mLBRAN)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mRBRAN)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mLBRAK)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mRBRAK)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mCOLON)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mSEMICOLON)	(struct JSONGrammarLexer_Ctx_struct * ctx);
    void (*mTokens)	(struct JSONGrammarLexer_Ctx_struct * ctx);    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct JSONGrammarLexer_Ctx_struct * ctx);
        
}
    JSONGrammarLexer, * pJSONGrammarLexer;

/* Function protoypes for the lexer functions that external translation units
 * may wish to call.
 */
ANTLR3_API pJSONGrammarLexer JSONGrammarLexerNew         (pANTLR3_INPUT_STREAM     instream);/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EXPONENT      9
#define UNICODE_ESC      14
#define OCTAL_ESC      15
#define HEX_DIGIT      13
#define SEMICOLON      22
#define FLOAT      6
#define INT      5
#define ID      8
#define Tokens      23
#define EOF      -1
#define COLON      21
#define RBRAN      18
#define RBRAK      20
#define LBRAK      19
#define XPATH      4
#define WS      11
#define ESC_SEQ      12
#define COMMA      16
#define LBRAN      17
#define COMMENT      10
#define STRING      7
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

/* End of token definitions for JSONGrammarLexer
 * =============================================================================
 */
/** \} */

#endif
/* END - Note:Keep extra linefeed to satisfy UNIX systems */
