/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g
 *     -                            On : 2013-04-09 18:51:39
 *     -                 for the lexer : filter_expressionLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "filter_expressionLexer.h"
/* ----------------------------------------- */


/** String literals used by filter_expressionLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x6E, 0x6F, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x5C, 0x22,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x5C, 0x27,  ANTLR3_STRING_TERMINATOR};





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pfilter_expressionLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pfilter_expressionLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pfilter_expressionLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pfilter_expressionLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))


/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER
#undef	    RULEMEMO
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE 
 void
	mNOT    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mOPER    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mOR    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mAND    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mNUMBER    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mFLOAT    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mCOMMENT    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mWS    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mSTRING    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mDOLLAR    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mXPATH    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mEXPONENT    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mHEX_DIGIT    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mESC_SEQ    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mOCTAL_ESC    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mUNICODE_ESC    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mCOMMA    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mLPAREN    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mRPAREN    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mLBRAN    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mRBRAN    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mLBRAK    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mRBRAK    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mCOLON    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mSEMICOLON    (pfilter_expressionLexer ctx);
static ANTLR3_INLINE 
 void
	mTokens    (pfilter_expressionLexer ctx);
static void	filter_expressionLexerFree(pfilter_expressionLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
filter_expressionLexerFree  (pfilter_expressionLexer ctx)
{
    LEXER->free(LEXER);

    ANTLR3_FREE(ctx);
}

static void
filter_expressionLexerReset (pfilter_expressionLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/cross/workspace/djondb_tx/db/grammars/filter_expression.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called filter_expressionLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pfilter_expressionLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pfilter_expressionLexer filter_expressionLexerNew
(
pANTLR3_INPUT_STREAM
 instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return filter_expressionLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called filter_expressionLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pfilter_expressionLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pfilter_expressionLexer filter_expressionLexerNewSSD
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pfilter_expressionLexer ctx; // Context structure we will build and return

    ctx = (pfilter_expressionLexer) ANTLR3_CALLOC(1, sizeof(filter_expressionLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in filter_expressionLexer.h here so you can get a sense
     * of what goes where.
     */

    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);

    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our filter_expressionLexer interface
     */
    ctx->mNOT	= mNOT;
    ctx->mOPER	= mOPER;
    ctx->mOR	= mOR;
    ctx->mAND	= mAND;
    ctx->mNUMBER	= mNUMBER;
    ctx->mFLOAT	= mFLOAT;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mWS	= mWS;
    ctx->mSTRING	= mSTRING;
    ctx->mDOLLAR	= mDOLLAR;
    ctx->mXPATH	= mXPATH;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mHEX_DIGIT	= mHEX_DIGIT;
    ctx->mESC_SEQ	= mESC_SEQ;
    ctx->mOCTAL_ESC	= mOCTAL_ESC;
    ctx->mUNICODE_ESC	= mUNICODE_ESC;
    ctx->mCOMMA	= mCOMMA;
    ctx->mLPAREN	= mLPAREN;
    ctx->mRPAREN	= mRPAREN;
    ctx->mLBRAN	= mLBRAN;
    ctx->mRBRAN	= mRBRAN;
    ctx->mLBRAK	= mLBRAK;
    ctx->mRBRAK	= mRBRAK;
    ctx->mCOLON	= mCOLON;
    ctx->mSEMICOLON	= mSEMICOLON;
    ctx->mTokens	= mTokens;

    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;

    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);

    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= filter_expressionLexerFree;
    ctx->reset          = filter_expressionLexerReset;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    190:1: FLOAT : ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT );
 */
static const ANTLR3_INT32 dfa8_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa8_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa8_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR3_INT32 dfa8_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR3_INT32 dfa8_accept[5] =
    {
	-1, -1, 2, 1, 3
    };
static const ANTLR3_INT32 dfa8_special[5] =
    {
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa8_T_empty	    NULL

static const ANTLR3_INT32 dfa8_T0[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

static const ANTLR3_INT32 dfa8_T1[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa8_transitions[] =
{
    dfa8_T0, dfa8_T1, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 8
 */
static
ANTLR3_CYCLIC_DFA cdfa8
    =	{
	    8,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"190:1: FLOAT : ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa8_eot,	    /* EOT table			    */
	    dfa8_eof,	    /* EOF table			    */
	    dfa8_min,	    /* Minimum tokens for each state    */
	    dfa8_max,	    /* Maximum tokens for each state    */
	    dfa8_accept,	/* Accept table			    */
	    dfa8_special,	/* Special transition states	    */
	    dfa8_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 8
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( NOT | OPER | OR | AND | NUMBER | FLOAT | COMMENT | WS | STRING | DOLLAR | XPATH | COMMA | LPAREN | RPAREN | LBRAN | RBRAN | LBRAK | RBRAK | COLON | SEMICOLON );
 */
static const ANTLR3_INT32 dfa23_eot[23] =
    {
	-1, -1, -1, -1, -1, 20, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[23] =
    {
	9, -1, -1, -1, -1, 46, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[23] =
    {
	125, -1, -1, -1, -1, 101, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[23] =
    {
	-1, 1, 2, 3, 4, -1, 6, 7, 8, 9, -1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
	5, 10, 11
    };
static const ANTLR3_INT32 dfa23_special[23] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	8, 8, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 8, 2, 9, -1, 10, -1, -1, 9, 12, 13, -1, -1, 11, -1, 6, 
	7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18, 19, 2, 2, 2, -1, -1, 4, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 16, -1, 17, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 
	-1, 15
    };

static const ANTLR3_INT32 dfa23_T1[] =
    {
	6, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
    };

static const ANTLR3_INT32 dfa23_T2[] =
    {
	22, -1, -1, -1, -1, 22
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T0, NULL, NULL, NULL, NULL, dfa23_T1, NULL, NULL, NULL, NULL, 
    dfa23_T2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( NOT | OPER | OR | AND | NUMBER | FLOAT | COMMENT | WS | STRING | DOLLAR | XPATH | COMMA | LPAREN | RPAREN | LBRAN | RBRAN | LBRAK | RBRAK | COLON | SEMICOLON );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 23
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 182:5: ( 'not' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NOT
 *
 * Looks to match the characters the constitute the token NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNOT(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NOT;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:182:5: ( 'not' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:182:7: 'not'
    {
        MATCHS(lit_1);
        if  (HASEXCEPTION())
        {
            goto ruleNOTEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleNOTEx; /* Prevent compiler warnings */
    ruleNOTEx: ;

}
// $ANTLR end NOT

//   Comes from: 184:6: ( ( '==' | '>' | '>=' | '<' | '<=' | '!=' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPER
 *
 * Looks to match the characters the constitute the token OPER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOPER(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OPER;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:6: ( ( '==' | '>' | '>=' | '<' | '<=' | '!=' ) )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:8: ( '==' | '>' | '>=' | '<' | '<=' | '!=' )
    {
        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:8: ( '==' | '>' | '>=' | '<' | '<=' | '!=' )
        {
            int alt1=6;
            switch ( LA(1) )
            {
            case '=':
            	{
            		alt1=1;
            	}
                break;
            case '>':
            	{
            		switch ( LA(2) )
            		{
            		case '=':
            			{
            				alt1=3;
            			}
            		    break;

            		default:
            		    alt1=2;
            		}

            	}
                break;
            case '<':
            	{
            		switch ( LA(2) )
            		{
            		case '=':
            			{
            				alt1=5;
            			}
            		    break;

            		default:
            		    alt1=4;
            		}

            	}
                break;
            case '!':
            	{
            		alt1=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto ruleOPEREx;

            }

            switch (alt1)
            {
        	case 1:
        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:9: '=='
        	    {
        	        MATCHS(lit_2);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }




        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:16: '>'
        	    {
        	        MATCHC('>');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:22: '>='
        	    {
        	        MATCHS(lit_3);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }




        	    }
        	    break;
        	case 4:
        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:29: '<'
        	    {
        	        MATCHC('<');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:35: '<='
        	    {
        	        MATCHS(lit_4);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }




        	    }
        	    break;
        	case 6:
        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:184:42: '!='
        	    {
        	        MATCHS(lit_5);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleOPEREx;
        	        }




        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleOPEREx; /* Prevent compiler warnings */
    ruleOPEREx: ;

}
// $ANTLR end OPER

//   Comes from: 185:4: ( ( 'o' | 'O' ) ( 'R' | 'r' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OR
 *
 * Looks to match the characters the constitute the token OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOR(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OR;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:185:4: ( ( 'o' | 'O' ) ( 'R' | 'r' ) )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:185:6: ( 'o' | 'O' ) ( 'R' | 'r' )
    {
        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleOREx;
        }


        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleOREx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleOREx; /* Prevent compiler warnings */
    ruleOREx: ;

}
// $ANTLR end OR

//   Comes from: 186:5: ( ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AND
 *
 * Looks to match the characters the constitute the token AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mAND(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = AND;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:186:5: ( ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' ) )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:186:7: ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' )
    {
        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleANDEx;
        }


        if ( LA(1) == 'N' || LA(1) == 'n' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleANDEx;
        }


        if ( LA(1) == 'D' || LA(1) == 'd' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleANDEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleANDEx; /* Prevent compiler warnings */
    ruleANDEx: ;

}
// $ANTLR end AND

//   Comes from: 188:8: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NUMBER
 *
 * Looks to match the characters the constitute the token NUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNUMBER(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NUMBER;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:188:8: ( ( '0' .. '9' )+ )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:188:10: ( '0' .. '9' )+
    {
        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:188:10: ( '0' .. '9' )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2)
        	{
        	    case 1:
        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleNUMBEREx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleNUMBEREx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleNUMBEREx; /* Prevent compiler warnings */
    ruleNUMBEREx: ;

}
// $ANTLR end NUMBER

//   Comes from: 191:5: ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT;


    {
        //  /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:191:5: ( NUMBER '.' ( NUMBER )* ( EXPONENT )? | '.' ( NUMBER )+ ( EXPONENT )? | ( NUMBER )+ EXPONENT )

        ANTLR3_UINT32 alt8;

        alt8=3;

        alt8 = cdfa8.predict(ctx, RECOGNIZER, ISTREAM, &cdfa8);
        if  (HASEXCEPTION())
        {
            goto ruleFLOATEx;
        }

        switch (alt8)
        {
    	case 1:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:191:9: NUMBER '.' ( NUMBER )* ( EXPONENT )?
    	    {
    	        /* 191:9: NUMBER '.' ( NUMBER )* ( EXPONENT )? */
    	        mNUMBER(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }



    	        MATCHC('.');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:191:20: ( NUMBER )*

    	        for (;;)
    	        {
    	            int alt3=2;
    	            switch ( LA(1) )
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt3=1;
    	            	}
    	                break;

    	            }

    	            switch (alt3)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:191:21: NUMBER
    	        	    {
    	        	        /* 191:21: NUMBER */
    	        	        mNUMBER(ctx );
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop3;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop3: ; /* Jump out to here if this rule does not match */


    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:191:30: ( EXPONENT )?
    	        {
    	            int alt4=2;
    	            switch ( LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt4=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt4)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:191:30: EXPONENT
    	        	    {
    	        	        /* 191:30: EXPONENT */
    	        	        mEXPONENT(ctx );
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:192:9: '.' ( NUMBER )+ ( EXPONENT )?
    	    {
    	        MATCHC('.');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:192:13: ( NUMBER )+
    	        {
    	            int cnt5=0;

    	            for (;;)
    	            {
    	                int alt5=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt5=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt5)
    	        	{
    	        	    case 1:
    	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:192:14: NUMBER
    	        	        {
    	        	            /* 192:14: NUMBER */
    	        	            mNUMBER(ctx );
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }



    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt5 >= 1 )
    	        		{
    	        		    goto loop5;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt5++;
    	            }
    	            loop5: ;	/* Jump to here if this rule does not match */
    	        }

    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:192:23: ( EXPONENT )?
    	        {
    	            int alt6=2;
    	            switch ( LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt6=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt6)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:192:23: EXPONENT
    	        	    {
    	        	        /* 192:23: EXPONENT */
    	        	        mEXPONENT(ctx );
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:193:9: ( NUMBER )+ EXPONENT
    	    {
    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:193:9: ( NUMBER )+
    	        {
    	            int cnt7=0;

    	            for (;;)
    	            {
    	                int alt7=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt7=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt7)
    	        	{
    	        	    case 1:
    	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:193:10: NUMBER
    	        	        {
    	        	            /* 193:10: NUMBER */
    	        	            mNUMBER(ctx );
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }



    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt7 >= 1 )
    	        		{
    	        		    goto loop7;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt7++;
    	            }
    	            loop7: ;	/* Jump to here if this rule does not match */
    	        }

    	        /* 193:9: ( NUMBER )+ EXPONENT */
    	        mEXPONENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 197:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;


    {
        //  /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:197:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )

        ANTLR3_UINT32 alt12;

        alt12=2;

        switch ( LA(1) )
        {
        case '/':
        	{
        		switch ( LA(2) )
        		{
        		case '/':
        			{
        				alt12=1;
        			}
        		    break;
        		case '*':
        			{
        				alt12=2;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 12;
        		    EXCEPTION->state        = 1;


        		    goto ruleCOMMENTEx;

        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 12;
            EXCEPTION->state        = 0;


            goto ruleCOMMENTEx;

        }

        switch (alt12)
        {
    	case 1:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:197:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    	    {
    	        MATCHS(lit_6);
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:197:14: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt9=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA9_0 = LA(1);
    	                if ( (((LA9_0 >= 0x0000) && (LA9_0 <= '\t')) || ((LA9_0 >= 0x000B) && (LA9_0 <= '\f')) || ((LA9_0 >= 0x000E) && (LA9_0 <= 0xFFFF))))
    	                {
    	                    alt9=1;
    	                }

    	            }
    	            switch (alt9)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:
    	        	    {
    	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            CONSUME();
    	        	        }
    	        	        else
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop9;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop9: ; /* Jump out to here if this rule does not match */


    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:197:28: ( '\\r' )?
    	        {
    	            int alt10=2;
    	            switch ( LA(1) )
    	            {
    	                case '\r':
    	                	{
    	                		alt10=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt10)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:197:28: '\\r'
    	        	    {
    	        	        MATCHC('\r');
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        MATCHC('\n');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:198:9: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        MATCHS(lit_7);
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:198:14: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt11=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA11_0 = LA(1);
    	                if ( (LA11_0 == '*'))
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA11_1 = LA(2);
    	                        if ( (LA11_1 == '/'))
    	                        {
    	                            alt11=2;
    	                        }
    	                        else if ( (((LA11_1 >= 0x0000) && (LA11_1 <= '.')) || ((LA11_1 >= '0') && (LA11_1 <= 0xFFFF))))
    	                        {
    	                            alt11=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA11_0 >= 0x0000) && (LA11_0 <= ')')) || ((LA11_0 >= '+') && (LA11_0 <= 0xFFFF))))
    	                {
    	                    alt11=1;
    	                }

    	            }
    	            switch (alt11)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:198:42: .
    	        	    {
    	        	        MATCHANY();
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop11;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop11: ; /* Jump out to here if this rule does not match */


    	        MATCHS(lit_8);
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 201:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:201:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:201:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
    {
        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:201:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
        {
            int cnt13=0;

            for (;;)
            {
                int alt13=2;
        	switch ( LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt13=1;
        		}
        	    break;

        	}

        	switch (alt13)
        	{
        	    case 1:
        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:
        	        {
        	            if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt13 >= 1 )
        		{
        		    goto loop13;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleWSEx;
        	}
        	cnt13++;
            }
            loop13: ;	/* Jump to here if this rule does not match */
        }

        {
            LEXSTATE->channel=HIDDEN;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 204:10: ( '\\\"' ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )* '\\\"' | '\\'' ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )* '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING;


    {
        //  /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:10: ( '\\\"' ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )* '\\\"' | '\\'' ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )* '\\'' )

        ANTLR3_UINT32 alt18;

        alt18=2;

        switch ( LA(1) )
        {
        case '"':
        	{
        		alt18=1;
        	}
            break;
        case '\'':
        	{
        		alt18=2;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 18;
            EXCEPTION->state        = 0;


            goto ruleSTRINGEx;

        }

        switch (alt18)
        {
    	case 1:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:13: '\\\"' ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )* '\\\"'
    	    {
    	        MATCHC('\"');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:18: ( options {greedy=false; } : (~ ( '\\\"' ) | ( '\\\\\"' ) ) )*

    	        for (;;)
    	        {
    	            int alt15=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA15_0 = LA(1);
    	                if ( (((LA15_0 >= 0x0000) && (LA15_0 <= '!')) || ((LA15_0 >= '#') && (LA15_0 <= 0xFFFF))))
    	                {
    	                    alt15=1;
    	                }
    	                else if ( (LA15_0 == '"'))
    	                {
    	                    alt15=2;
    	                }

    	            }
    	            switch (alt15)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:46: (~ ( '\\\"' ) | ( '\\\\\"' ) )
    	        	    {
    	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:46: (~ ( '\\\"' ) | ( '\\\\\"' ) )
    	        	        {
    	        	            int alt14=2;
    	        	            {
    	        	                int LA14_0 = LA(1);
    	        	                if ( (LA14_0 == '\\'))
    	        	                {
    	        	                    {
    	        	                        int LA14_1 = LA(2);
    	        	                        if ( (LA14_1 == '"'))
    	        	                        {
    	        	                            {
    	        	                                int LA14_3 = LA(3);
    	        	                                if ( (((LA14_3 >= 0x0000) && (LA14_3 <= 0xFFFF))))
    	        	                                {
    	        	                                    alt14=2;
    	        	                                }
    	        	                                else
    	        	                                {
    	        	                                    alt14=1;
    	        	                                }
    	        	                            }
    	        	                        }
    	        	                        else if ( (((LA14_1 >= 0x0000) && (LA14_1 <= '!')) || ((LA14_1 >= '#') && (LA14_1 <= 0xFFFF))))
    	        	                        {
    	        	                            alt14=1;
    	        	                        }
    	        	                        else
    	        	                        {

    	        	                            CONSTRUCTEX();
    	        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                            EXCEPTION->message      = (void *)"";
    	        	                            EXCEPTION->decisionNum  = 14;
    	        	                            EXCEPTION->state        = 1;


    	        	                            goto ruleSTRINGEx;

    	        	                        }
    	        	                    }
    	        	                }
    	        	                else if ( (((LA14_0 >= 0x0000) && (LA14_0 <= '!')) || ((LA14_0 >= '#') && (LA14_0 <= '[')) || ((LA14_0 >= ']') && (LA14_0 <= 0xFFFF))))
    	        	                {
    	        	                    alt14=1;
    	        	                }
    	        	                else
    	        	                {

    	        	                    CONSTRUCTEX();
    	        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                    EXCEPTION->message      = (void *)"";
    	        	                    EXCEPTION->decisionNum  = 14;
    	        	                    EXCEPTION->state        = 0;


    	        	                    goto ruleSTRINGEx;

    	        	                }
    	        	            }
    	        	            switch (alt14)
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:47: ~ ( '\\\"' )
    	        	        	    {
    	        	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= 0xFFFF)) )
    	        	        	        {
    	        	        	            CONSUME();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            CONSTRUCTEX();
    	        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	        	            LRECOVER();
    	        	        	            goto ruleSTRINGEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;
    	        	        	case 2:
    	        	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:57: ( '\\\\\"' )
    	        	        	    {
    	        	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:57: ( '\\\\\"' )
    	        	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:58: '\\\\\"'
    	        	        	        {
    	        	        	            MATCHS(lit_9);
    	        	        	            if  (HASEXCEPTION())
    	        	        	            {
    	        	        	                goto ruleSTRINGEx;
    	        	        	            }




    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop15;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop15: ; /* Jump out to here if this rule does not match */


    	        MATCHC('\"');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:76: '\\'' ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )* '\\''
    	    {
    	        MATCHC('\'');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:81: ( options {greedy=false; } : (~ ( '\\'' ) | ( '\\\\\\'' ) ) )*

    	        for (;;)
    	        {
    	            int alt17=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA17_0 = LA(1);
    	                if ( (((LA17_0 >= 0x0000) && (LA17_0 <= '&')) || ((LA17_0 >= '(') && (LA17_0 <= 0xFFFF))))
    	                {
    	                    alt17=1;
    	                }
    	                else if ( (LA17_0 == '\''))
    	                {
    	                    alt17=2;
    	                }

    	            }
    	            switch (alt17)
    	            {
    	        	case 1:
    	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:109: (~ ( '\\'' ) | ( '\\\\\\'' ) )
    	        	    {
    	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:109: (~ ( '\\'' ) | ( '\\\\\\'' ) )
    	        	        {
    	        	            int alt16=2;
    	        	            {
    	        	                int LA16_0 = LA(1);
    	        	                if ( (LA16_0 == '\\'))
    	        	                {
    	        	                    {
    	        	                        int LA16_1 = LA(2);
    	        	                        if ( (LA16_1 == '\''))
    	        	                        {
    	        	                            {
    	        	                                int LA16_3 = LA(3);
    	        	                                if ( (((LA16_3 >= 0x0000) && (LA16_3 <= 0xFFFF))))
    	        	                                {
    	        	                                    alt16=2;
    	        	                                }
    	        	                                else
    	        	                                {
    	        	                                    alt16=1;
    	        	                                }
    	        	                            }
    	        	                        }
    	        	                        else if ( (((LA16_1 >= 0x0000) && (LA16_1 <= '&')) || ((LA16_1 >= '(') && (LA16_1 <= 0xFFFF))))
    	        	                        {
    	        	                            alt16=1;
    	        	                        }
    	        	                        else
    	        	                        {

    	        	                            CONSTRUCTEX();
    	        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                            EXCEPTION->message      = (void *)"";
    	        	                            EXCEPTION->decisionNum  = 16;
    	        	                            EXCEPTION->state        = 1;


    	        	                            goto ruleSTRINGEx;

    	        	                        }
    	        	                    }
    	        	                }
    	        	                else if ( (((LA16_0 >= 0x0000) && (LA16_0 <= '&')) || ((LA16_0 >= '(') && (LA16_0 <= '[')) || ((LA16_0 >= ']') && (LA16_0 <= 0xFFFF))))
    	        	                {
    	        	                    alt16=1;
    	        	                }
    	        	                else
    	        	                {

    	        	                    CONSTRUCTEX();
    	        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	        	                    EXCEPTION->message      = (void *)"";
    	        	                    EXCEPTION->decisionNum  = 16;
    	        	                    EXCEPTION->state        = 0;


    	        	                    goto ruleSTRINGEx;

    	        	                }
    	        	            }
    	        	            switch (alt16)
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:110: ~ ( '\\'' )
    	        	        	    {
    	        	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= 0xFFFF)) )
    	        	        	        {
    	        	        	            CONSUME();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            CONSTRUCTEX();
    	        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	        	            LRECOVER();
    	        	        	            goto ruleSTRINGEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;
    	        	        	case 2:
    	        	        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:120: ( '\\\\\\'' )
    	        	        	    {
    	        	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:120: ( '\\\\\\'' )
    	        	        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:204:121: '\\\\\\''
    	        	        	        {
    	        	        	            MATCHS(lit_10);
    	        	        	            if  (HASEXCEPTION())
    	        	        	            {
    	        	        	                goto ruleSTRINGEx;
    	        	        	            }




    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop17;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop17: ; /* Jump out to here if this rule does not match */


    	        MATCHC('\'');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 206:9: ( '$' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOLLAR
 *
 * Looks to match the characters the constitute the token DOLLAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOLLAR(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DOLLAR;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:206:9: ( '$' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:206:12: '$'
    {
        MATCHC('$');
        if  (HASEXCEPTION())
        {
            goto ruleDOLLAREx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleDOLLAREx; /* Prevent compiler warnings */
    ruleDOLLAREx: ;

}
// $ANTLR end DOLLAR

//   Comes from: 208:5: ( DOLLAR STRING )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start XPATH
 *
 * Looks to match the characters the constitute the token XPATH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mXPATH(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = XPATH;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:208:5: ( DOLLAR STRING )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:208:7: DOLLAR STRING
    {
        /* 208:7: DOLLAR STRING */
        mDOLLAR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleXPATHEx;
        }



        /* 208:7: DOLLAR STRING */
        mSTRING(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleXPATHEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleXPATHEx; /* Prevent compiler warnings */
    ruleXPATHEx: ;

}
// $ANTLR end XPATH

//   Comes from: 213:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:213:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:213:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleEXPONENTEx;
        }


        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:213:22: ( '+' | '-' )?
        {
            int alt19=2;
            switch ( LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt19=1;
                	}
                    break;
            }

            switch (alt19)
            {
        	case 1:
        	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }

        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:213:33: ( '0' .. '9' )+
        {
            int cnt20=0;

            for (;;)
            {
                int alt20=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt20=1;
        		}
        	    break;

        	}

        	switch (alt20)
        	{
        	    case 1:
        	        // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt20 >= 1 )
        		{
        		    goto loop20;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt20++;
            }
            loop20: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 216:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_DIGIT(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:216:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleHEX_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 220:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESC_SEQ(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;


    {
        //  /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:220:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )

        ANTLR3_UINT32 alt21;

        alt21=3;

        switch ( LA(1) )
        {
        case '\\':
        	{
        		switch ( LA(2) )
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt21=1;
        			}
        		    break;
        		case 'u':
        			{
        				alt21=2;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt21=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 21;
        		    EXCEPTION->state        = 1;


        		    goto ruleESC_SEQEx;

        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 21;
            EXCEPTION->state        = 0;


            goto ruleESC_SEQEx;

        }

        switch (alt21)
        {
    	case 1:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:220:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:221:9: UNICODE_ESC
    	    {
    	        /* 221:9: UNICODE_ESC */
    	        mUNICODE_ESC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:222:13: OCTAL_ESC
    	    {
    	        /* 222:13: OCTAL_ESC */
    	        mOCTAL_ESC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 227:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCTAL_ESC(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;


    {
        //  /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:227:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )

        ANTLR3_UINT32 alt22;

        alt22=3;

        switch ( LA(1) )
        {
        case '\\':
        	{
        		switch ( LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt22=1;
        							}
        						    break;

        						default:
        						    alt22=2;
        						}

        					}
        				    break;

        				default:
        				    alt22=3;
        				}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt22=2;
        					}
        				    break;

        				default:
        				    alt22=3;
        				}

        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 22;
        		    EXCEPTION->state        = 1;


        		    goto ruleOCTAL_ESCEx;

        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 22;
            EXCEPTION->state        = 0;


            goto ruleOCTAL_ESCEx;

        }

        switch (alt22)
        {
    	case 1:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:227:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '3')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:228:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:229:9: '\\\\' ( '0' .. '7' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 234:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNICODE_ESC(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:234:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:234:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    {
        MATCHC('\\');
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


        MATCHC('u');
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


        /* 234:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 234:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 234:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 234:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



    }


    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

//   Comes from: 237:2: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMA(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMA;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:237:2: ( ',' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:237:4: ','
    {
        MATCHC(',');
        if  (HASEXCEPTION())
        {
            goto ruleCOMMAEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 238:8: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LPAREN
 *
 * Looks to match the characters the constitute the token LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLPAREN(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LPAREN;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:238:8: ( '(' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:238:10: '('
    {
        MATCHC('(');
        if  (HASEXCEPTION())
        {
            goto ruleLPARENEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLPARENEx; /* Prevent compiler warnings */
    ruleLPARENEx: ;

}
// $ANTLR end LPAREN

//   Comes from: 239:8: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RPAREN
 *
 * Looks to match the characters the constitute the token RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRPAREN(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RPAREN;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:239:8: ( ')' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:239:10: ')'
    {
        MATCHC(')');
        if  (HASEXCEPTION())
        {
            goto ruleRPARENEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleRPARENEx; /* Prevent compiler warnings */
    ruleRPARENEx: ;

}
// $ANTLR end RPAREN

//   Comes from: 240:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRAN
 *
 * Looks to match the characters the constitute the token LBRAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRAN(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRAN;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:240:7: ( '{' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:240:9: '{'
    {
        MATCHC('{');
        if  (HASEXCEPTION())
        {
            goto ruleLBRANEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLBRANEx; /* Prevent compiler warnings */
    ruleLBRANEx: ;

}
// $ANTLR end LBRAN

//   Comes from: 241:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRAN
 *
 * Looks to match the characters the constitute the token RBRAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRAN(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRAN;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:241:7: ( '}' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:241:9: '}'
    {
        MATCHC('}');
        if  (HASEXCEPTION())
        {
            goto ruleRBRANEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleRBRANEx; /* Prevent compiler warnings */
    ruleRBRANEx: ;

}
// $ANTLR end RBRAN

//   Comes from: 243:2: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRAK
 *
 * Looks to match the characters the constitute the token LBRAK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRAK(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRAK;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:243:2: ( '[' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:243:4: '['
    {
        MATCHC('[');
        if  (HASEXCEPTION())
        {
            goto ruleLBRAKEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLBRAKEx; /* Prevent compiler warnings */
    ruleLBRAKEx: ;

}
// $ANTLR end LBRAK

//   Comes from: 245:2: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRAK
 *
 * Looks to match the characters the constitute the token RBRAK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRAK(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRAK;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:245:2: ( ']' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:245:4: ']'
    {
        MATCHC(']');
        if  (HASEXCEPTION())
        {
            goto ruleRBRAKEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleRBRAKEx; /* Prevent compiler warnings */
    ruleRBRAKEx: ;

}
// $ANTLR end RBRAK

//   Comes from: 247:2: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLON(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLON;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:247:2: ( ':' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:247:4: ':'
    {
        MATCHC(':');
        if  (HASEXCEPTION())
        {
            goto ruleCOLONEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 249:9: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMICOLON
 *
 * Looks to match the characters the constitute the token SEMICOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMICOLON(pfilter_expressionLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMICOLON;


    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:249:9: ( ';' )
    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:249:17: ';'
    {
        MATCHC(';');
        if  (HASEXCEPTION())
        {
            goto ruleSEMICOLONEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSEMICOLONEx; /* Prevent compiler warnings */
    ruleSEMICOLONEx: ;

}
// $ANTLR end SEMICOLON

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void
mTokens(pfilter_expressionLexer ctx)
{
    {
        //  /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:8: ( NOT | OPER | OR | AND | NUMBER | FLOAT | COMMENT | WS | STRING | DOLLAR | XPATH | COMMA | LPAREN | RPAREN | LBRAN | RBRAN | LBRAK | RBRAK | COLON | SEMICOLON )

        ANTLR3_UINT32 alt23;

        alt23=20;

        alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt23)
        {
    	case 1:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:10: NOT
    	    {
    	        /* 1:10: NOT */
    	        mNOT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:14: OPER
    	    {
    	        /* 1:14: OPER */
    	        mOPER(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:19: OR
    	    {
    	        /* 1:19: OR */
    	        mOR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:22: AND
    	    {
    	        /* 1:22: AND */
    	        mAND(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:26: NUMBER
    	    {
    	        /* 1:26: NUMBER */
    	        mNUMBER(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:33: FLOAT
    	    {
    	        /* 1:33: FLOAT */
    	        mFLOAT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:39: COMMENT
    	    {
    	        /* 1:39: COMMENT */
    	        mCOMMENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:47: WS
    	    {
    	        /* 1:47: WS */
    	        mWS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:50: STRING
    	    {
    	        /* 1:50: STRING */
    	        mSTRING(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:57: DOLLAR
    	    {
    	        /* 1:57: DOLLAR */
    	        mDOLLAR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:64: XPATH
    	    {
    	        /* 1:64: XPATH */
    	        mXPATH(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:70: COMMA
    	    {
    	        /* 1:70: COMMA */
    	        mCOMMA(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:76: LPAREN
    	    {
    	        /* 1:76: LPAREN */
    	        mLPAREN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:83: RPAREN
    	    {
    	        /* 1:83: RPAREN */
    	        mRPAREN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:90: LBRAN
    	    {
    	        /* 1:90: LBRAN */
    	        mLBRAN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:96: RBRAN
    	    {
    	        /* 1:96: RBRAN */
    	        mRBRAN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:102: LBRAK
    	    {
    	        /* 1:102: LBRAK */
    	        mLBRAK(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:108: RBRAK
    	    {
    	        /* 1:108: RBRAK */
    	        mRBRAK(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:114: COLON
    	    {
    	        /* 1:114: COLON */
    	        mCOLON(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // /home/cross/workspace/djondb_tx/db/grammars/filter_expression.g:1:120: SEMICOLON
    	    {
    	        /* 1:120: SEMICOLON */
    	        mSEMICOLON(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */


/* End of code
 * =============================================================================
 */
