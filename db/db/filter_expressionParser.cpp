/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/cross/workspace/djondb/db/grammars/filter_expression.g
 *     -                            On : 2012-07-19 16:56:18
 *     -                for the parser : filter_expressionParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "filter_expressionParser.h"

static void displayRecognitionErrorNew  (pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_UINT8 * tokenNames) throw(ParseException)
{ 
    switch (recognizer->state->exception->type) {
    	case ANTLR3_UNWANTED_TOKEN_EXCEPTION:
		break;
	default:
		throw ParseException(1, "error");
    }
}
 
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pfilter_expressionParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pfilter_expressionParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pfilter_expressionParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pfilter_expressionParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   filter_expressionParserTokenNames[24+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "DOLLAR",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "LBRAK",
        (pANTLR3_UINT8) "LBRAN",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "OPER",
        (pANTLR3_UINT8) "OPER_BINARY",
        (pANTLR3_UINT8) "RBRAK",
        (pANTLR3_UINT8) "RBRAN",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "XPATH"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 BaseExpression*
	start_point    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	filter_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	boolean_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	binary_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	comparison_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	unary_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	xpath_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	constant_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	operand_expr    (pfilter_expressionParser ctx);
static void	filter_expressionParserFree(pfilter_expressionParser ctx);
static void     filter_expressionParserReset (pfilter_expressionParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/cross/workspace/djondb/db/grammars/filter_expression.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new filter_expressionParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pfilter_expressionParser
filter_expressionParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return filter_expressionParserNewSSD(instream, NULL);
}

/** \brief Create a new filter_expressionParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pfilter_expressionParser
filter_expressionParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pfilter_expressionParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pfilter_expressionParser) ANTLR3_CALLOC(1, sizeof(filter_expressionParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in filter_expressionParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our filter_expressionParser interface
     */
    ctx->start_point	= start_point;
    ctx->filter_expr	= filter_expr;
    ctx->boolean_expr	= boolean_expr;
    ctx->binary_expr	= binary_expr;
    ctx->comparison_expr	= comparison_expr;
    ctx->unary_expr	= unary_expr;
    ctx->xpath_expr	= xpath_expr;
    ctx->constant_expr	= constant_expr;
    ctx->operand_expr	= operand_expr;
    ctx->free			= filter_expressionParserFree;
    ctx->reset			= filter_expressionParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */


      RECOGNIZER->displayRecognitionError       = displayRecognitionErrorNew;
    //  RECOGNIZER->antlr3RecognitionExceptionNew = antlr3RecognitionExceptionNewNew;
    //  RECOGNIZER->mismatch                      = mismatchNew;

    /* Install the token table
     */
    PSRSTATE->tokenNames   = filter_expressionParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
filter_expressionParserReset (pfilter_expressionParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 filter_expressionParserFree(pfilter_expressionParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return filter_expressionParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_filter_expr_in_start_point63  */
static	ANTLR3_BITWORD FOLLOW_filter_expr_in_start_point63_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_filter_expr_in_start_point63	= { FOLLOW_filter_expr_in_start_point63_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_start_point65  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_start_point65_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_start_point65	= { FOLLOW_EOF_in_start_point65_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_expr_in_filter_expr83  */
static	ANTLR3_BITWORD FOLLOW_boolean_expr_in_filter_expr83_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_expr_in_filter_expr83	= { FOLLOW_boolean_expr_in_filter_expr83_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_boolean_expr100  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_boolean_expr100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_boolean_expr100	= { FOLLOW_unary_expr_in_boolean_expr100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_expr_in_boolean_expr106  */
static	ANTLR3_BITWORD FOLLOW_binary_expr_in_boolean_expr106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_expr_in_boolean_expr106	= { FOLLOW_binary_expr_in_boolean_expr106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_comparison_expr_in_boolean_expr112  */
static	ANTLR3_BITWORD FOLLOW_comparison_expr_in_boolean_expr112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_comparison_expr_in_boolean_expr112	= { FOLLOW_comparison_expr_in_boolean_expr112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_binary_expr142  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_binary_expr142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_binary_expr142	= { FOLLOW_unary_expr_in_binary_expr142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_binary_expr148  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_binary_expr148_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009009000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_binary_expr148	= { FOLLOW_LPAREN_in_binary_expr148_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_expr_in_binary_expr152  */
static	ANTLR3_BITWORD FOLLOW_binary_expr_in_binary_expr152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_expr_in_binary_expr152	= { FOLLOW_binary_expr_in_binary_expr152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_binary_expr154  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_binary_expr154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_binary_expr154	= { FOLLOW_RPAREN_in_binary_expr154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_binary_expr161  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_binary_expr161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009009000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_binary_expr161	= { FOLLOW_LPAREN_in_binary_expr161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_comparison_expr_in_binary_expr165  */
static	ANTLR3_BITWORD FOLLOW_comparison_expr_in_binary_expr165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_comparison_expr_in_binary_expr165	= { FOLLOW_comparison_expr_in_binary_expr165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_binary_expr167  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_binary_expr167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_binary_expr167	= { FOLLOW_RPAREN_in_binary_expr167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPER_BINARY_in_binary_expr172  */
static	ANTLR3_BITWORD FOLLOW_OPER_BINARY_in_binary_expr172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009009000) };
static  ANTLR3_BITSET_LIST FOLLOW_OPER_BINARY_in_binary_expr172	= { FOLLOW_OPER_BINARY_in_binary_expr172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_binary_expr178  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_binary_expr178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_binary_expr178	= { FOLLOW_unary_expr_in_binary_expr178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_binary_expr184  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_binary_expr184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009009000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_binary_expr184	= { FOLLOW_LPAREN_in_binary_expr184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_expr_in_binary_expr188  */
static	ANTLR3_BITWORD FOLLOW_binary_expr_in_binary_expr188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_expr_in_binary_expr188	= { FOLLOW_binary_expr_in_binary_expr188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_binary_expr190  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_binary_expr190_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_binary_expr190	= { FOLLOW_RPAREN_in_binary_expr190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_binary_expr197  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_binary_expr197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009009000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_binary_expr197	= { FOLLOW_LPAREN_in_binary_expr197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_comparison_expr_in_binary_expr201  */
static	ANTLR3_BITWORD FOLLOW_comparison_expr_in_binary_expr201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_comparison_expr_in_binary_expr201	= { FOLLOW_comparison_expr_in_binary_expr201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_binary_expr203  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_binary_expr203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_binary_expr203	= { FOLLOW_RPAREN_in_binary_expr203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_comparison_expr230  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_comparison_expr230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_comparison_expr230	= { FOLLOW_LPAREN_in_comparison_expr230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_comparison_expr234  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_comparison_expr234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_comparison_expr234	= { FOLLOW_unary_expr_in_comparison_expr234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPER_in_comparison_expr238  */
static	ANTLR3_BITWORD FOLLOW_OPER_in_comparison_expr238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009001000) };
static  ANTLR3_BITSET_LIST FOLLOW_OPER_in_comparison_expr238	= { FOLLOW_OPER_in_comparison_expr238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_comparison_expr242  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_comparison_expr242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_comparison_expr242	= { FOLLOW_unary_expr_in_comparison_expr242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_comparison_expr244  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_comparison_expr244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_comparison_expr244	= { FOLLOW_RPAREN_in_comparison_expr244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_comparison_expr255  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_comparison_expr255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_comparison_expr255	= { FOLLOW_unary_expr_in_comparison_expr255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPER_in_comparison_expr259  */
static	ANTLR3_BITWORD FOLLOW_OPER_in_comparison_expr259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000009001000) };
static  ANTLR3_BITSET_LIST FOLLOW_OPER_in_comparison_expr259	= { FOLLOW_OPER_in_comparison_expr259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_comparison_expr263  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_comparison_expr263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_comparison_expr263	= { FOLLOW_unary_expr_in_comparison_expr263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expr_in_unary_expr292  */
static	ANTLR3_BITWORD FOLLOW_constant_expr_in_unary_expr292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expr_in_unary_expr292	= { FOLLOW_constant_expr_in_unary_expr292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_xpath_expr_in_unary_expr300  */
static	ANTLR3_BITWORD FOLLOW_xpath_expr_in_unary_expr300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_xpath_expr_in_unary_expr300	= { FOLLOW_xpath_expr_in_unary_expr300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XPATH_in_xpath_expr317  */
static	ANTLR3_BITWORD FOLLOW_XPATH_in_xpath_expr317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_XPATH_in_xpath_expr317	= { FOLLOW_XPATH_in_xpath_expr317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_constant_expr333  */
static	ANTLR3_BITWORD FOLLOW_INT_in_constant_expr333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_constant_expr333	= { FOLLOW_INT_in_constant_expr333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_constant_expr340  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_constant_expr340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_constant_expr340	= { FOLLOW_STRING_in_constant_expr340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPER_in_operand_expr355  */
static	ANTLR3_BITWORD FOLLOW_OPER_in_operand_expr355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OPER_in_operand_expr355	= { FOLLOW_OPER_in_operand_expr355_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start start_point
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:39:1: start_point returns [BaseExpression* val] : filter_expr EOF ;
 */
static BaseExpression*
start_point(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* filter_expr1;
    #undef	RETURN_TYPE_filter_expr1
    #define	RETURN_TYPE_filter_expr1 BaseExpression*

    /* Initialize rule variables
     */


    	
    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:41:4: ( filter_expr EOF )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:41:6: filter_expr EOF
        {
            FOLLOWPUSH(FOLLOW_filter_expr_in_start_point63);
            filter_expr1=filter_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }


             MATCHT(EOF, &FOLLOW_EOF_in_start_point65);
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }


            {

                	    val= 
                filter_expr1
                ;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestart_pointEx; /* Prevent compiler warnings */
    rulestart_pointEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end start_point */

/**
 * $ANTLR start filter_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:46:1: filter_expr returns [BaseExpression* val] : boolean_expr ;
 */
static BaseExpression*
filter_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* boolean_expr2;
    #undef	RETURN_TYPE_boolean_expr2
    #define	RETURN_TYPE_boolean_expr2 BaseExpression*

    /* Initialize rule variables
     */

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:47:2: ( boolean_expr )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:48:2: boolean_expr
        {
            FOLLOWPUSH(FOLLOW_boolean_expr_in_filter_expr83);
            boolean_expr2=boolean_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefilter_exprEx;
            }


            {

                	val= 
                boolean_expr2
                ;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefilter_exprEx; /* Prevent compiler warnings */
    rulefilter_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end filter_expr */

/**
 * $ANTLR start boolean_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:52:1: boolean_expr returns [BaseExpression* val] : ( unary_expr | binary_expr | comparison_expr );
 */
static BaseExpression*
boolean_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* unary_expr3;
    #undef	RETURN_TYPE_unary_expr3
    #define	RETURN_TYPE_unary_expr3 BaseExpression*

    BaseExpression* binary_expr4;
    #undef	RETURN_TYPE_binary_expr4
    #define	RETURN_TYPE_binary_expr4 BaseExpression*

    BaseExpression* comparison_expr5;
    #undef	RETURN_TYPE_comparison_expr5
    #define	RETURN_TYPE_comparison_expr5 BaseExpression*

    /* Initialize rule variables
     */

    {
        {
            //  /home/cross/workspace/djondb/db/grammars/filter_expression.g:53:2: ( unary_expr | binary_expr | comparison_expr )

            ANTLR3_UINT32 alt1;

            alt1=3;

            switch ( LA(1) )
            {
            case INT:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            			{
            				alt1=1;
            			}
            		    break;
            		case OPER_BINARY:
            			{
            				alt1=2;
            			}
            		    break;
            		case OPER:
            			{
            				alt1=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 1;


            		    goto ruleboolean_exprEx;

            		}

            	}
                break;
            case STRING:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            			{
            				alt1=1;
            			}
            		    break;
            		case OPER_BINARY:
            			{
            				alt1=2;
            			}
            		    break;
            		case OPER:
            			{
            				alt1=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 2;


            		    goto ruleboolean_exprEx;

            		}

            	}
                break;
            case XPATH:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            			{
            				alt1=1;
            			}
            		    break;
            		case OPER_BINARY:
            			{
            				alt1=2;
            			}
            		    break;
            		case OPER:
            			{
            				alt1=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 3;


            		    goto ruleboolean_exprEx;

            		}

            	}
                break;
            case LPAREN:
            	{
            		switch ( LA(2) )
            		{
            		case INT:
            			{
            				switch ( LA(3) )
            				{
            				case OPER_BINARY:
            					{
            						alt1=2;
            					}
            				    break;
            				case OPER:
            					{
            						switch ( LA(4) )
            						{
            						case INT:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 12;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 13;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;
            						case XPATH:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 14;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 1;
            						    EXCEPTION->state        = 11;


            						    goto ruleboolean_exprEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 1;
            				    EXCEPTION->state        = 8;


            				    goto ruleboolean_exprEx;

            				}

            			}
            		    break;
            		case STRING:
            			{
            				switch ( LA(3) )
            				{
            				case OPER_BINARY:
            					{
            						alt1=2;
            					}
            				    break;
            				case OPER:
            					{
            						switch ( LA(4) )
            						{
            						case INT:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 12;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 13;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;
            						case XPATH:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 14;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 1;
            						    EXCEPTION->state        = 11;


            						    goto ruleboolean_exprEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 1;
            				    EXCEPTION->state        = 9;


            				    goto ruleboolean_exprEx;

            				}

            			}
            		    break;
            		case XPATH:
            			{
            				switch ( LA(3) )
            				{
            				case OPER_BINARY:
            					{
            						alt1=2;
            					}
            				    break;
            				case OPER:
            					{
            						switch ( LA(4) )
            						{
            						case INT:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 12;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 13;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;
            						case XPATH:
            							{
            								switch ( LA(5) )
            								{
            								case RPAREN:
            									{
            										switch ( LA(6) )
            										{
            										case OPER_BINARY:
            											{
            												alt1=2;
            											}
            										    break;
            										case EOF:
            											{
            												alt1=3;
            											}
            										    break;

            										default:
            										    CONSTRUCTEX();
            										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            										    EXCEPTION->message      = (void *)"";
            										    EXCEPTION->decisionNum  = 1;
            										    EXCEPTION->state        = 15;


            										    goto ruleboolean_exprEx;

            										}

            									}
            								    break;

            								default:
            								    CONSTRUCTEX();
            								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            								    EXCEPTION->message      = (void *)"";
            								    EXCEPTION->decisionNum  = 1;
            								    EXCEPTION->state        = 14;


            								    goto ruleboolean_exprEx;

            								}

            							}
            						    break;

            						default:
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 1;
            						    EXCEPTION->state        = 11;


            						    goto ruleboolean_exprEx;

            						}

            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 1;
            				    EXCEPTION->state        = 10;


            				    goto ruleboolean_exprEx;

            				}

            			}
            		    break;
            		case LPAREN:
            			{
            				alt1=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 4;


            		    goto ruleboolean_exprEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto ruleboolean_exprEx;

            }

            switch (alt1)
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:53:5: unary_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_unary_expr_in_boolean_expr100);
        	        unary_expr3=unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleboolean_exprEx;
        	        }


        	        {

        	            	    val= 
        	            unary_expr3
        	            ;

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:55:6: binary_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_binary_expr_in_boolean_expr106);
        	        binary_expr4=binary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleboolean_exprEx;
        	        }


        	        {

        	            	    val= 
        	            binary_expr4
        	            ;

        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:57:6: comparison_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_comparison_expr_in_boolean_expr112);
        	        comparison_expr5=comparison_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleboolean_exprEx;
        	        }


        	        {

        	            	    val= 
        	            comparison_expr5
        	            ;

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleboolean_exprEx; /* Prevent compiler warnings */
    ruleboolean_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end boolean_expr */

/**
 * $ANTLR start binary_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:62:1: binary_expr returns [BaseExpression* val] : (u1= unary_expr | ( LPAREN b1= binary_expr RPAREN ) | ( LPAREN c1= comparison_expr RPAREN ) ) OPER_BINARY (u2= unary_expr | ( LPAREN b2= binary_expr RPAREN ) | ( LPAREN c2= comparison_expr RPAREN ) ) ;
 */
static BaseExpression*
binary_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    pANTLR3_COMMON_TOKEN    OPER_BINARY6;
    BaseExpression* u1;
    #undef	RETURN_TYPE_u1
    #define	RETURN_TYPE_u1 BaseExpression*

    BaseExpression* b1;
    #undef	RETURN_TYPE_b1
    #define	RETURN_TYPE_b1 BaseExpression*

    BaseExpression* c1;
    #undef	RETURN_TYPE_c1
    #define	RETURN_TYPE_c1 BaseExpression*

    BaseExpression* u2;
    #undef	RETURN_TYPE_u2
    #define	RETURN_TYPE_u2 BaseExpression*

    BaseExpression* b2;
    #undef	RETURN_TYPE_b2
    #define	RETURN_TYPE_b2 BaseExpression*

    BaseExpression* c2;
    #undef	RETURN_TYPE_c2
    #define	RETURN_TYPE_c2 BaseExpression*

    /* Initialize rule variables
     */


        FILTER_OPERATORS oper = FO_NONE;
        BaseExpression* left = NULL;
        BaseExpression* right = NULL;
        BinaryExpression* result = NULL;

    OPER_BINARY6       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:74:2: ( (u1= unary_expr | ( LPAREN b1= binary_expr RPAREN ) | ( LPAREN c1= comparison_expr RPAREN ) ) OPER_BINARY (u2= unary_expr | ( LPAREN b2= binary_expr RPAREN ) | ( LPAREN c2= comparison_expr RPAREN ) ) )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:74:4: (u1= unary_expr | ( LPAREN b1= binary_expr RPAREN ) | ( LPAREN c1= comparison_expr RPAREN ) ) OPER_BINARY (u2= unary_expr | ( LPAREN b2= binary_expr RPAREN ) | ( LPAREN c2= comparison_expr RPAREN ) )
        {
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:74:4: (u1= unary_expr | ( LPAREN b1= binary_expr RPAREN ) | ( LPAREN c1= comparison_expr RPAREN ) )
            {
                int alt2=3;
                switch ( LA(1) )
                {
                case INT:
                case STRING:
                case XPATH:
                	{
                		alt2=1;
                	}
                    break;
                case LPAREN:
                	{
                		switch ( LA(2) )
                		{
                		case INT:
                			{
                				switch ( LA(3) )
                				{
                				case OPER_BINARY:
                					{
                						alt2=2;
                					}
                				    break;
                				case OPER:
                					{
                						alt2=3;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 2;
                				    EXCEPTION->state        = 3;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;
                		case STRING:
                			{
                				switch ( LA(3) )
                				{
                				case OPER_BINARY:
                					{
                						alt2=2;
                					}
                				    break;
                				case OPER:
                					{
                						alt2=3;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 2;
                				    EXCEPTION->state        = 4;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;
                		case XPATH:
                			{
                				switch ( LA(3) )
                				{
                				case OPER_BINARY:
                					{
                						alt2=2;
                					}
                				    break;
                				case OPER:
                					{
                						alt2=3;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 2;
                				    EXCEPTION->state        = 5;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;
                		case LPAREN:
                			{
                				switch ( LA(3) )
                				{
                				case INT:
                					{
                						switch ( LA(4) )
                						{
                						case OPER_BINARY:
                							{
                								alt2=2;
                							}
                						    break;
                						case OPER:
                							{
                								switch ( LA(5) )
                								{
                								case INT:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 13;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 14;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case XPATH:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 15;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;

                								default:
                								    CONSTRUCTEX();
                								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                								    EXCEPTION->message      = (void *)"";
                								    EXCEPTION->decisionNum  = 2;
                								    EXCEPTION->state        = 12;


                								    goto rulebinary_exprEx;

                								}

                							}
                						    break;

                						default:
                						    CONSTRUCTEX();
                						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                						    EXCEPTION->message      = (void *)"";
                						    EXCEPTION->decisionNum  = 2;
                						    EXCEPTION->state        = 9;


                						    goto rulebinary_exprEx;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( LA(4) )
                						{
                						case OPER_BINARY:
                							{
                								alt2=2;
                							}
                						    break;
                						case OPER:
                							{
                								switch ( LA(5) )
                								{
                								case INT:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 13;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 14;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case XPATH:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 15;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;

                								default:
                								    CONSTRUCTEX();
                								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                								    EXCEPTION->message      = (void *)"";
                								    EXCEPTION->decisionNum  = 2;
                								    EXCEPTION->state        = 12;


                								    goto rulebinary_exprEx;

                								}

                							}
                						    break;

                						default:
                						    CONSTRUCTEX();
                						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                						    EXCEPTION->message      = (void *)"";
                						    EXCEPTION->decisionNum  = 2;
                						    EXCEPTION->state        = 10;


                						    goto rulebinary_exprEx;

                						}

                					}
                				    break;
                				case XPATH:
                					{
                						switch ( LA(4) )
                						{
                						case OPER_BINARY:
                							{
                								alt2=2;
                							}
                						    break;
                						case OPER:
                							{
                								switch ( LA(5) )
                								{
                								case INT:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 13;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 14;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case XPATH:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt2=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt2=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 2;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 2;
                										    EXCEPTION->state        = 15;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;

                								default:
                								    CONSTRUCTEX();
                								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                								    EXCEPTION->message      = (void *)"";
                								    EXCEPTION->decisionNum  = 2;
                								    EXCEPTION->state        = 12;


                								    goto rulebinary_exprEx;

                								}

                							}
                						    break;

                						default:
                						    CONSTRUCTEX();
                						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                						    EXCEPTION->message      = (void *)"";
                						    EXCEPTION->decisionNum  = 2;
                						    EXCEPTION->state        = 11;


                						    goto rulebinary_exprEx;

                						}

                					}
                				    break;
                				case LPAREN:
                					{
                						alt2=2;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 2;
                				    EXCEPTION->state        = 6;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;

                		default:
                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 2;
                		    EXCEPTION->state        = 2;


                		    goto rulebinary_exprEx;

                		}

                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 2;
                    EXCEPTION->state        = 0;


                    goto rulebinary_exprEx;

                }

                switch (alt2)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:74:5: u1= unary_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_unary_expr_in_binary_expr142);
            	        u1=unary_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebinary_exprEx;
            	        }


            	        {

            	            	   left = u1
            	            ;
            	            	
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:6: ( LPAREN b1= binary_expr RPAREN )
            	    {
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:6: ( LPAREN b1= binary_expr RPAREN )
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:7: LPAREN b1= binary_expr RPAREN
            	        {
            	             MATCHT(LPAREN, &FOLLOW_LPAREN_in_binary_expr148);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            FOLLOWPUSH(FOLLOW_binary_expr_in_binary_expr152);
            	            b1=binary_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	             MATCHT(RPAREN, &FOLLOW_RPAREN_in_binary_expr154);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            {

            	                	   left = b1
            	                ;
            	                	
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:78:7: ( LPAREN c1= comparison_expr RPAREN )
            	    {
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:78:7: ( LPAREN c1= comparison_expr RPAREN )
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:78:8: LPAREN c1= comparison_expr RPAREN
            	        {
            	             MATCHT(LPAREN, &FOLLOW_LPAREN_in_binary_expr161);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            FOLLOWPUSH(FOLLOW_comparison_expr_in_binary_expr165);
            	            c1=comparison_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	             MATCHT(RPAREN, &FOLLOW_RPAREN_in_binary_expr167);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            {

            	                	    left = c1
            	                ;
            	                	
            	            }


            	        }


            	    }
            	    break;

                }
            }

            OPER_BINARY6 = (pANTLR3_COMMON_TOKEN) MATCHT(OPER_BINARY, &FOLLOW_OPER_BINARY_in_binary_expr172);
            if  (HASEXCEPTION())
            {
                goto rulebinary_exprEx;
            }


            {

                	   oper = parseFilterOperator((char*)(OPER_BINARY6->getText(OPER_BINARY6))->chars);
                	
            }


            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:82:3: (u2= unary_expr | ( LPAREN b2= binary_expr RPAREN ) | ( LPAREN c2= comparison_expr RPAREN ) )
            {
                int alt3=3;
                switch ( LA(1) )
                {
                case INT:
                case STRING:
                case XPATH:
                	{
                		alt3=1;
                	}
                    break;
                case LPAREN:
                	{
                		switch ( LA(2) )
                		{
                		case INT:
                			{
                				switch ( LA(3) )
                				{
                				case OPER_BINARY:
                					{
                						alt3=2;
                					}
                				    break;
                				case OPER:
                					{
                						alt3=3;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 3;
                				    EXCEPTION->state        = 3;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;
                		case STRING:
                			{
                				switch ( LA(3) )
                				{
                				case OPER_BINARY:
                					{
                						alt3=2;
                					}
                				    break;
                				case OPER:
                					{
                						alt3=3;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 3;
                				    EXCEPTION->state        = 4;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;
                		case XPATH:
                			{
                				switch ( LA(3) )
                				{
                				case OPER_BINARY:
                					{
                						alt3=2;
                					}
                				    break;
                				case OPER:
                					{
                						alt3=3;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 3;
                				    EXCEPTION->state        = 5;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;
                		case LPAREN:
                			{
                				switch ( LA(3) )
                				{
                				case INT:
                					{
                						switch ( LA(4) )
                						{
                						case OPER_BINARY:
                							{
                								alt3=2;
                							}
                						    break;
                						case OPER:
                							{
                								switch ( LA(5) )
                								{
                								case INT:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 13;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 14;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case XPATH:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 15;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;

                								default:
                								    CONSTRUCTEX();
                								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                								    EXCEPTION->message      = (void *)"";
                								    EXCEPTION->decisionNum  = 3;
                								    EXCEPTION->state        = 12;


                								    goto rulebinary_exprEx;

                								}

                							}
                						    break;

                						default:
                						    CONSTRUCTEX();
                						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                						    EXCEPTION->message      = (void *)"";
                						    EXCEPTION->decisionNum  = 3;
                						    EXCEPTION->state        = 9;


                						    goto rulebinary_exprEx;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( LA(4) )
                						{
                						case OPER_BINARY:
                							{
                								alt3=2;
                							}
                						    break;
                						case OPER:
                							{
                								switch ( LA(5) )
                								{
                								case INT:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 13;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 14;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case XPATH:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 15;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;

                								default:
                								    CONSTRUCTEX();
                								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                								    EXCEPTION->message      = (void *)"";
                								    EXCEPTION->decisionNum  = 3;
                								    EXCEPTION->state        = 12;


                								    goto rulebinary_exprEx;

                								}

                							}
                						    break;

                						default:
                						    CONSTRUCTEX();
                						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                						    EXCEPTION->message      = (void *)"";
                						    EXCEPTION->decisionNum  = 3;
                						    EXCEPTION->state        = 10;


                						    goto rulebinary_exprEx;

                						}

                					}
                				    break;
                				case XPATH:
                					{
                						switch ( LA(4) )
                						{
                						case OPER_BINARY:
                							{
                								alt3=2;
                							}
                						    break;
                						case OPER:
                							{
                								switch ( LA(5) )
                								{
                								case INT:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 13;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 14;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;
                								case XPATH:
                									{
                										switch ( LA(6) )
                										{
                										case RPAREN:
                											{
                												switch ( LA(7) )
                												{
                												case OPER_BINARY:
                													{
                														alt3=2;
                													}
                												    break;
                												case RPAREN:
                													{
                														alt3=3;
                													}
                												    break;

                												default:
                												    CONSTRUCTEX();
                												    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                												    EXCEPTION->message      = (void *)"";
                												    EXCEPTION->decisionNum  = 3;
                												    EXCEPTION->state        = 16;


                												    goto rulebinary_exprEx;

                												}

                											}
                										    break;

                										default:
                										    CONSTRUCTEX();
                										    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                										    EXCEPTION->message      = (void *)"";
                										    EXCEPTION->decisionNum  = 3;
                										    EXCEPTION->state        = 15;


                										    goto rulebinary_exprEx;

                										}

                									}
                								    break;

                								default:
                								    CONSTRUCTEX();
                								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                								    EXCEPTION->message      = (void *)"";
                								    EXCEPTION->decisionNum  = 3;
                								    EXCEPTION->state        = 12;


                								    goto rulebinary_exprEx;

                								}

                							}
                						    break;

                						default:
                						    CONSTRUCTEX();
                						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                						    EXCEPTION->message      = (void *)"";
                						    EXCEPTION->decisionNum  = 3;
                						    EXCEPTION->state        = 11;


                						    goto rulebinary_exprEx;

                						}

                					}
                				    break;
                				case LPAREN:
                					{
                						alt3=2;
                					}
                				    break;

                				default:
                				    CONSTRUCTEX();
                				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				    EXCEPTION->message      = (void *)"";
                				    EXCEPTION->decisionNum  = 3;
                				    EXCEPTION->state        = 6;


                				    goto rulebinary_exprEx;

                				}

                			}
                		    break;

                		default:
                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 3;
                		    EXCEPTION->state        = 2;


                		    goto rulebinary_exprEx;

                		}

                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 3;
                    EXCEPTION->state        = 0;


                    goto rulebinary_exprEx;

                }

                switch (alt3)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:82:4: u2= unary_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_unary_expr_in_binary_expr178);
            	        u2=unary_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebinary_exprEx;
            	        }


            	        {

            	            	   right = u2
            	            ;
            	            	
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:84:6: ( LPAREN b2= binary_expr RPAREN )
            	    {
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:84:6: ( LPAREN b2= binary_expr RPAREN )
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:84:7: LPAREN b2= binary_expr RPAREN
            	        {
            	             MATCHT(LPAREN, &FOLLOW_LPAREN_in_binary_expr184);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            FOLLOWPUSH(FOLLOW_binary_expr_in_binary_expr188);
            	            b2=binary_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	             MATCHT(RPAREN, &FOLLOW_RPAREN_in_binary_expr190);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            {

            	                	   right = b2
            	                ;
            	                	
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:86:7: ( LPAREN c2= comparison_expr RPAREN )
            	    {
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:86:7: ( LPAREN c2= comparison_expr RPAREN )
            	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:86:8: LPAREN c2= comparison_expr RPAREN
            	        {
            	             MATCHT(LPAREN, &FOLLOW_LPAREN_in_binary_expr197);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            FOLLOWPUSH(FOLLOW_comparison_expr_in_binary_expr201);
            	            c2=comparison_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	             MATCHT(RPAREN, &FOLLOW_RPAREN_in_binary_expr203);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebinary_exprEx;
            	            }


            	            {

            	                	    right = c2
            	                ;
            	                	
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulebinary_exprEx; /* Prevent compiler warnings */
    rulebinary_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                        result = new BinaryExpression(oper);
                        result->push(left);
                        result->push(right);

                }
            }


    return val;
}
/* $ANTLR end binary_expr */

/**
 * $ANTLR start comparison_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:90:1: comparison_expr returns [BaseExpression* val] : ( ( LPAREN u1= unary_expr o1= OPER u2= unary_expr RPAREN ) | (u3= unary_expr o2= OPER u4= unary_expr ) );
 */
static BaseExpression*
comparison_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    pANTLR3_COMMON_TOKEN    o1;
    pANTLR3_COMMON_TOKEN    o2;
    BaseExpression* u1;
    #undef	RETURN_TYPE_u1
    #define	RETURN_TYPE_u1 BaseExpression*

    BaseExpression* u2;
    #undef	RETURN_TYPE_u2
    #define	RETURN_TYPE_u2 BaseExpression*

    BaseExpression* u3;
    #undef	RETURN_TYPE_u3
    #define	RETURN_TYPE_u3 BaseExpression*

    BaseExpression* u4;
    #undef	RETURN_TYPE_u4
    #define	RETURN_TYPE_u4 BaseExpression*

    /* Initialize rule variables
     */


    FILTER_OPERATORS oper = FO_NONE;
    BinaryExpression* result = NULL;

    o1       = NULL;
    o2       = NULL;

    {
        {
            //  /home/cross/workspace/djondb/db/grammars/filter_expression.g:100:2: ( ( LPAREN u1= unary_expr o1= OPER u2= unary_expr RPAREN ) | (u3= unary_expr o2= OPER u4= unary_expr ) )

            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) )
            {
            case LPAREN:
            	{
            		alt4=1;
            	}
                break;
            case INT:
            case STRING:
            case XPATH:
            	{
            		alt4=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto rulecomparison_exprEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:100:4: ( LPAREN u1= unary_expr o1= OPER u2= unary_expr RPAREN )
        	    {
        	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:100:4: ( LPAREN u1= unary_expr o1= OPER u2= unary_expr RPAREN )
        	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:100:5: LPAREN u1= unary_expr o1= OPER u2= unary_expr RPAREN
        	        {
        	             MATCHT(LPAREN, &FOLLOW_LPAREN_in_comparison_expr230);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	            FOLLOWPUSH(FOLLOW_unary_expr_in_comparison_expr234);
        	            u1=unary_expr(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	            o1 = (pANTLR3_COMMON_TOKEN) MATCHT(OPER, &FOLLOW_OPER_in_comparison_expr238);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	            FOLLOWPUSH(FOLLOW_unary_expr_in_comparison_expr242);
        	            u2=unary_expr(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	             MATCHT(RPAREN, &FOLLOW_RPAREN_in_comparison_expr244);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	        }


        	        {

        	            	   oper = parseFilterOperator((char*)(o1->getText(o1))->chars);
        	            	   result = new BinaryExpression(oper);
        	            	   result->push(
        	            u1
        	            );
        	            	   result->push(u2
        	            );
        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:106:6: (u3= unary_expr o2= OPER u4= unary_expr )
        	    {
        	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:106:6: (u3= unary_expr o2= OPER u4= unary_expr )
        	        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:106:7: u3= unary_expr o2= OPER u4= unary_expr
        	        {
        	            FOLLOWPUSH(FOLLOW_unary_expr_in_comparison_expr255);
        	            u3=unary_expr(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	            o2 = (pANTLR3_COMMON_TOKEN) MATCHT(OPER, &FOLLOW_OPER_in_comparison_expr259);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	            FOLLOWPUSH(FOLLOW_unary_expr_in_comparison_expr263);
        	            u4=unary_expr(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecomparison_exprEx;
        	            }


        	        }


        	        {

        	            	   oper = parseFilterOperator((char*)(o2->getText(o2))->chars);
        	            	   result = new BinaryExpression(oper);
        	            	   result->push(
        	            u3
        	            );
        	            	   result->push(u4
        	            );
        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecomparison_exprEx; /* Prevent compiler warnings */
    rulecomparison_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    val= result;


                }
            }


    return val;
}
/* $ANTLR end comparison_expr */

/**
 * $ANTLR start unary_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:114:1: unary_expr returns [BaseExpression* val] : (c1= constant_expr |x1= xpath_expr ) ;
 */
static BaseExpression*
unary_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* c1;
    #undef	RETURN_TYPE_c1
    #define	RETURN_TYPE_c1 BaseExpression*

    BaseExpression* x1;
    #undef	RETURN_TYPE_x1
    #define	RETURN_TYPE_x1 BaseExpression*

    /* Initialize rule variables
     */


    	     val = NULL;
    	
    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:2: ( (c1= constant_expr |x1= xpath_expr ) )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:4: (c1= constant_expr |x1= xpath_expr )
        {
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:4: (c1= constant_expr |x1= xpath_expr )
            {
                int alt5=2;
                switch ( LA(1) )
                {
                case INT:
                case STRING:
                	{
                		alt5=1;
                	}
                    break;
                case XPATH:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 5;
                    EXCEPTION->state        = 0;


                    goto ruleunary_exprEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:5: c1= constant_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_constant_expr_in_unary_expr292);
            	        c1=constant_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	        {

            	            	        val= c1;

            	            	
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:120:6: x1= xpath_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_xpath_expr_in_unary_expr300);
            	        x1=xpath_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	        {

            	            	        val= x1;

            	            	
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunary_exprEx; /* Prevent compiler warnings */
    ruleunary_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end unary_expr */

/**
 * $ANTLR start xpath_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:124:1: xpath_expr returns [BaseExpression* val] : XPATH ;
 */
static BaseExpression*
xpath_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    pANTLR3_COMMON_TOKEN    XPATH7;

    /* Initialize rule variables
     */

    XPATH7       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:125:2: ( XPATH )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:125:4: XPATH
        {
            XPATH7 = (pANTLR3_COMMON_TOKEN) MATCHT(XPATH, &FOLLOW_XPATH_in_xpath_expr317);
            if  (HASEXCEPTION())
            {
                goto rulexpath_exprEx;
            }


            {

                	     char* text = (char*)(XPATH7->getText(XPATH7))->chars;
                	     SimpleExpression* result = new SimpleExpression(text);
                	     
                val= result;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulexpath_exprEx; /* Prevent compiler warnings */
    rulexpath_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end xpath_expr */

/**
 * $ANTLR start constant_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:131:1: constant_expr returns [BaseExpression* val] : ( INT | STRING ) ;
 */
static BaseExpression*
constant_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    pANTLR3_COMMON_TOKEN    INT8;
    pANTLR3_COMMON_TOKEN    STRING9;

    /* Initialize rule variables
     */

    INT8       = NULL;
    STRING9       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:2: ( ( INT | STRING ) )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:4: ( INT | STRING )
        {
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:4: ( INT | STRING )
            {
                int alt6=2;
                switch ( LA(1) )
                {
                case INT:
                	{
                		alt6=1;
                	}
                    break;
                case STRING:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 6;
                    EXCEPTION->state        = 0;


                    goto ruleconstant_exprEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:5: INT
            	    {
            	        INT8 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_constant_expr333);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstant_exprEx;
            	        }


            	        {

            	            	    int i = atoi((char*)(INT8->getText(INT8))->chars);
            	            	    
            	            val= new ConstantExpression(i);

            	            	
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:136:6: STRING
            	    {
            	        STRING9 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_constant_expr340);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstant_exprEx;
            	        }


            	        {

            	            	    char* ptext = (char*)(STRING9->getText(STRING9))->chars;
            	            	    char* text = (char*)malloc(strlen(ptext) - 1);
            	            	    memset(text, 0, strlen(ptext) - 1);
            	            	    memcpy(text, ptext + 1, strlen(ptext) - 2);
            	            	    
            	            	    
            	            val= new ConstantExpression(text);

            	            	    free (text);
            	            	
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconstant_exprEx; /* Prevent compiler warnings */
    ruleconstant_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end constant_expr */

/**
 * $ANTLR start operand_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:146:1: operand_expr returns [BaseExpression* val] : OPER ;
 */
static BaseExpression*
operand_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    /* Initialize rule variables
     */

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:147:2: ( OPER )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:147:4: OPER
        {
             MATCHT(OPER, &FOLLOW_OPER_in_operand_expr355);
            if  (HASEXCEPTION())
            {
                goto ruleoperand_exprEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoperand_exprEx; /* Prevent compiler warnings */
    ruleoperand_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end operand_expr */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
