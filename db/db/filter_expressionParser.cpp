/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/cross/workspace/djondb/db/grammars/filter_expression.g
 *     -                            On : 2012-07-18 22:43:06
 *     -                for the parser : filter_expressionParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "filter_expressionParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pfilter_expressionParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pfilter_expressionParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pfilter_expressionParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pfilter_expressionParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   filter_expressionParserTokenNames[25+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "DOLLAR",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "LBRAK",
        (pANTLR3_UINT8) "LBRAN",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "OPER",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "RBRAK",
        (pANTLR3_UINT8) "RBRAN",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "XPATH"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 BaseExpression*
	start_point    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	filter_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	boolean_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	binary_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	binary_noparent_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	binary_parent_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	unary_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	xpath_expr    (pfilter_expressionParser ctx);
static 
 BaseExpression*
	constant_expr    (pfilter_expressionParser ctx);
static 
 filter_expressionParser_operand_expr_return
	operand_expr    (pfilter_expressionParser ctx);
static void	filter_expressionParserFree(pfilter_expressionParser ctx);
static void     filter_expressionParserReset (pfilter_expressionParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/cross/workspace/djondb/db/grammars/filter_expression.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new filter_expressionParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pfilter_expressionParser
filter_expressionParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return filter_expressionParserNewSSD(instream, NULL);
}

/** \brief Create a new filter_expressionParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pfilter_expressionParser
filter_expressionParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pfilter_expressionParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pfilter_expressionParser) ANTLR3_CALLOC(1, sizeof(filter_expressionParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in filter_expressionParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our filter_expressionParser interface
     */
    ctx->start_point	= start_point;
    ctx->filter_expr	= filter_expr;
    ctx->boolean_expr	= boolean_expr;
    ctx->binary_expr	= binary_expr;
    ctx->binary_noparent_expr	= binary_noparent_expr;
    ctx->binary_parent_expr	= binary_parent_expr;
    ctx->unary_expr	= unary_expr;
    ctx->xpath_expr	= xpath_expr;
    ctx->constant_expr	= constant_expr;
    ctx->operand_expr	= operand_expr;
    ctx->free			= filter_expressionParserFree;
    ctx->reset			= filter_expressionParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = filter_expressionParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
filter_expressionParserReset (pfilter_expressionParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 filter_expressionParserFree(pfilter_expressionParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return filter_expressionParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_filter_expr_in_start_point51  */
static	ANTLR3_BITWORD FOLLOW_filter_expr_in_start_point51_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_filter_expr_in_start_point51	= { FOLLOW_filter_expr_in_start_point51_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_start_point53  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_start_point53_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_start_point53	= { FOLLOW_EOF_in_start_point53_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_expr_in_filter_expr86  */
static	ANTLR3_BITWORD FOLLOW_boolean_expr_in_filter_expr86_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100012) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_expr_in_filter_expr86	= { FOLLOW_boolean_expr_in_filter_expr86_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_filter_expr92  */
static	ANTLR3_BITWORD FOLLOW_OR_in_filter_expr92_bits[]	= { ANTLR3_UINT64_LIT(0x0000000012032000) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_filter_expr92	= { FOLLOW_OR_in_filter_expr92_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_expr_in_filter_expr96  */
static	ANTLR3_BITWORD FOLLOW_boolean_expr_in_filter_expr96_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100012) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_expr_in_filter_expr96	= { FOLLOW_boolean_expr_in_filter_expr96_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_filter_expr105  */
static	ANTLR3_BITWORD FOLLOW_AND_in_filter_expr105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000012032000) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_filter_expr105	= { FOLLOW_AND_in_filter_expr105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolean_expr_in_filter_expr109  */
static	ANTLR3_BITWORD FOLLOW_boolean_expr_in_filter_expr109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000012) };
static  ANTLR3_BITSET_LIST FOLLOW_boolean_expr_in_filter_expr109	= { FOLLOW_boolean_expr_in_filter_expr109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_boolean_expr129  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_boolean_expr129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000012012000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_boolean_expr129	= { FOLLOW_NOT_in_boolean_expr129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_expr_in_boolean_expr135  */
static	ANTLR3_BITWORD FOLLOW_binary_expr_in_boolean_expr135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_expr_in_boolean_expr135	= { FOLLOW_binary_expr_in_boolean_expr135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_boolean_expr146  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_boolean_expr146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_boolean_expr146	= { FOLLOW_unary_expr_in_boolean_expr146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_noparent_expr_in_binary_expr167  */
static	ANTLR3_BITWORD FOLLOW_binary_noparent_expr_in_binary_expr167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_noparent_expr_in_binary_expr167	= { FOLLOW_binary_noparent_expr_in_binary_expr167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_parent_expr_in_binary_expr175  */
static	ANTLR3_BITWORD FOLLOW_binary_parent_expr_in_binary_expr175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_parent_expr_in_binary_expr175	= { FOLLOW_binary_parent_expr_in_binary_expr175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_binary_noparent_expr208  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_binary_noparent_expr208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_binary_noparent_expr208	= { FOLLOW_unary_expr_in_binary_noparent_expr208_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_expr_in_binary_noparent_expr214  */
static	ANTLR3_BITWORD FOLLOW_operand_expr_in_binary_noparent_expr214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000012002000) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_expr_in_binary_noparent_expr214	= { FOLLOW_operand_expr_in_binary_noparent_expr214_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expr_in_binary_noparent_expr218  */
static	ANTLR3_BITWORD FOLLOW_unary_expr_in_binary_noparent_expr218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expr_in_binary_noparent_expr218	= { FOLLOW_unary_expr_in_binary_noparent_expr218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_binary_parent_expr234  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_binary_parent_expr234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000012012000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_binary_parent_expr234	= { FOLLOW_LPAREN_in_binary_parent_expr234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_expr_in_binary_parent_expr236  */
static	ANTLR3_BITWORD FOLLOW_binary_expr_in_binary_parent_expr236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_expr_in_binary_parent_expr236	= { FOLLOW_binary_expr_in_binary_parent_expr236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_binary_parent_expr238  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_binary_parent_expr238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_binary_parent_expr238	= { FOLLOW_RPAREN_in_binary_parent_expr238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expr_in_unary_expr263  */
static	ANTLR3_BITWORD FOLLOW_constant_expr_in_unary_expr263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expr_in_unary_expr263	= { FOLLOW_constant_expr_in_unary_expr263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_xpath_expr_in_unary_expr271  */
static	ANTLR3_BITWORD FOLLOW_xpath_expr_in_unary_expr271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_xpath_expr_in_unary_expr271	= { FOLLOW_xpath_expr_in_unary_expr271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XPATH_in_xpath_expr288  */
static	ANTLR3_BITWORD FOLLOW_XPATH_in_xpath_expr288_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_XPATH_in_xpath_expr288	= { FOLLOW_XPATH_in_xpath_expr288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_constant_expr304  */
static	ANTLR3_BITWORD FOLLOW_INT_in_constant_expr304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_constant_expr304	= { FOLLOW_INT_in_constant_expr304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_constant_expr311  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_constant_expr311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_constant_expr311	= { FOLLOW_STRING_in_constant_expr311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPER_in_operand_expr326  */
static	ANTLR3_BITWORD FOLLOW_OPER_in_operand_expr326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OPER_in_operand_expr326	= { FOLLOW_OPER_in_operand_expr326_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start start_point
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:41:1: start_point returns [BaseExpression* val] : filter_expr EOF ;
 */
static BaseExpression*
start_point(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* filter_expr1;
    #undef	RETURN_TYPE_filter_expr1
    #define	RETURN_TYPE_filter_expr1 BaseExpression*

    /* Initialize rule variables
     */


    	
    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:43:4: ( filter_expr EOF )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:43:6: filter_expr EOF
        {
            FOLLOWPUSH(FOLLOW_filter_expr_in_start_point51);
            filter_expr1=filter_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }


             MATCHT(EOF, &FOLLOW_EOF_in_start_point53);
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }


            {

                	    val= 
                filter_expr1
                ;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestart_pointEx; /* Prevent compiler warnings */
    rulestart_pointEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end start_point */

/**
 * $ANTLR start filter_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:48:1: filter_expr returns [BaseExpression* val] : b1= boolean_expr ( OR b2= boolean_expr )* ( AND b3= boolean_expr )* ;
 */
static BaseExpression*
filter_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* b1;
    #undef	RETURN_TYPE_b1
    #define	RETURN_TYPE_b1 BaseExpression*

    BaseExpression* b2;
    #undef	RETURN_TYPE_b2
    #define	RETURN_TYPE_b2 BaseExpression*

    BaseExpression* b3;
    #undef	RETURN_TYPE_b3
    #define	RETURN_TYPE_b3 BaseExpression*

    /* Initialize rule variables
     */


    	 BaseExpression* result = NULL;
    	
    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:54:3: (b1= boolean_expr ( OR b2= boolean_expr )* ( AND b3= boolean_expr )* )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:55:3: b1= boolean_expr ( OR b2= boolean_expr )* ( AND b3= boolean_expr )*
        {
            FOLLOWPUSH(FOLLOW_boolean_expr_in_filter_expr86);
            b1=boolean_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefilter_exprEx;
            }


            {

                	        BaseExpression* expr1 = b1
                ;
                	        result = expr1;
                	
            }


            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:59:2: ( OR b2= boolean_expr )*

            for (;;)
            {
                int alt1=2;
                switch ( LA(1) )
                {
                case OR:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:59:3: OR b2= boolean_expr
            	    {
            	         MATCHT(OR, &FOLLOW_OR_in_filter_expr92);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefilter_exprEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_boolean_expr_in_filter_expr96);
            	        b2=boolean_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefilter_exprEx;
            	        }


            	        {

            	            	    BaseExpression* expr2 = b2
            	            ;
            	            	    BinaryExpression* binary = new BinaryExpression(FO_OR);
            	            	    binary->push(result);
            	            	    binary->push(expr2);
            	            	    result = binary;
            	            	
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:66:3: ( AND b3= boolean_expr )*

            for (;;)
            {
                int alt2=2;
                switch ( LA(1) )
                {
                case AND:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:66:4: AND b3= boolean_expr
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_filter_expr105);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefilter_exprEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_boolean_expr_in_filter_expr109);
            	        b3=boolean_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefilter_exprEx;
            	        }


            	        {

            	            	    BaseExpression* expr3 = b3
            	            ;
            	            	    BinaryExpression* binary = new BinaryExpression(FO_AND);
            	            	    binary->push(result);
            	            	    binary->push(expr3);
            	            	    result = binary;
            	            	
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefilter_exprEx; /* Prevent compiler warnings */
    rulefilter_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    	   val= result;

                    	
                }
            }


    return val;
}
/* $ANTLR end filter_expr */

/**
 * $ANTLR start boolean_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:74:1: boolean_expr returns [BaseExpression* val] : ( ( NOT )? (b3= binary_expr |b4= unary_expr ) ) ;
 */
static BaseExpression*
boolean_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* b3;
    #undef	RETURN_TYPE_b3
    #define	RETURN_TYPE_b3 BaseExpression*

    BaseExpression* b4;
    #undef	RETURN_TYPE_b4
    #define	RETURN_TYPE_b4 BaseExpression*

    /* Initialize rule variables
     */

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:75:2: ( ( ( NOT )? (b3= binary_expr |b4= unary_expr ) ) )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:2: ( ( NOT )? (b3= binary_expr |b4= unary_expr ) )
        {
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:2: ( ( NOT )? (b3= binary_expr |b4= unary_expr ) )
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:3: ( NOT )? (b3= binary_expr |b4= unary_expr )
            {
                // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:3: ( NOT )?
                {
                    int alt3=2;
                    switch ( LA(1) )
                    {
                        case NOT:
                        	{
                        		alt3=1;
                        	}
                            break;
                    }

                    switch (alt3)
                    {
                	case 1:
                	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:3: NOT
                	    {
                	         MATCHT(NOT, &FOLLOW_NOT_in_boolean_expr129);
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleboolean_exprEx;
                	        }


                	    }
                	    break;

                    }
                }

                // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:8: (b3= binary_expr |b4= unary_expr )
                {
                    int alt4=2;
                    switch ( LA(1) )
                    {
                    case INT:
                    	{
                    		switch ( LA(2) )
                    		{
                    		case OPER:
                    			{
                    				alt4=1;
                    			}
                    		    break;
                    		case EOF:
                    		case AND:
                    		case OR:
                    			{
                    				alt4=2;
                    			}
                    		    break;

                    		default:
                    		    CONSTRUCTEX();
                    		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    		    EXCEPTION->message      = (void *)"";
                    		    EXCEPTION->decisionNum  = 4;
                    		    EXCEPTION->state        = 1;


                    		    goto ruleboolean_exprEx;

                    		}

                    	}
                        break;
                    case STRING:
                    	{
                    		switch ( LA(2) )
                    		{
                    		case OPER:
                    			{
                    				alt4=1;
                    			}
                    		    break;
                    		case EOF:
                    		case AND:
                    		case OR:
                    			{
                    				alt4=2;
                    			}
                    		    break;

                    		default:
                    		    CONSTRUCTEX();
                    		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    		    EXCEPTION->message      = (void *)"";
                    		    EXCEPTION->decisionNum  = 4;
                    		    EXCEPTION->state        = 2;


                    		    goto ruleboolean_exprEx;

                    		}

                    	}
                        break;
                    case XPATH:
                    	{
                    		switch ( LA(2) )
                    		{
                    		case OPER:
                    			{
                    				alt4=1;
                    			}
                    		    break;
                    		case EOF:
                    		case AND:
                    		case OR:
                    			{
                    				alt4=2;
                    			}
                    		    break;

                    		default:
                    		    CONSTRUCTEX();
                    		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    		    EXCEPTION->message      = (void *)"";
                    		    EXCEPTION->decisionNum  = 4;
                    		    EXCEPTION->state        = 3;


                    		    goto ruleboolean_exprEx;

                    		}

                    	}
                        break;
                    case LPAREN:
                    	{
                    		alt4=1;
                    	}
                        break;

                    default:
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 4;
                        EXCEPTION->state        = 0;


                        goto ruleboolean_exprEx;

                    }

                    switch (alt4)
                    {
                	case 1:
                	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:76:9: b3= binary_expr
                	    {
                	        FOLLOWPUSH(FOLLOW_binary_expr_in_boolean_expr135);
                	        b3=binary_expr(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleboolean_exprEx;
                	        }


                	        {

                	            	    val= 
                	            b3
                	            ;

                	            	
                	        }


                	    }
                	    break;
                	case 2:
                	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:80:4: b4= unary_expr
                	    {
                	        FOLLOWPUSH(FOLLOW_unary_expr_in_boolean_expr146);
                	        b4=unary_expr(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleboolean_exprEx;
                	        }


                	        {

                	            	    val= 
                	            b4
                	            ;

                	            	
                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleboolean_exprEx; /* Prevent compiler warnings */
    ruleboolean_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end boolean_expr */

/**
 * $ANTLR start binary_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:85:1: binary_expr returns [BaseExpression* val] : ( binary_noparent_expr | binary_parent_expr );
 */
static BaseExpression*
binary_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* binary_noparent_expr2;
    #undef	RETURN_TYPE_binary_noparent_expr2
    #define	RETURN_TYPE_binary_noparent_expr2 BaseExpression*

    BaseExpression* binary_parent_expr3;
    #undef	RETURN_TYPE_binary_parent_expr3
    #define	RETURN_TYPE_binary_parent_expr3 BaseExpression*

    /* Initialize rule variables
     */

    {
        {
            //  /home/cross/workspace/djondb/db/grammars/filter_expression.g:86:2: ( binary_noparent_expr | binary_parent_expr )

            ANTLR3_UINT32 alt5;

            alt5=2;

            switch ( LA(1) )
            {
            case INT:
            case STRING:
            case XPATH:
            	{
            		alt5=1;
            	}
                break;
            case LPAREN:
            	{
            		alt5=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto rulebinary_exprEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:86:4: binary_noparent_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_binary_noparent_expr_in_binary_expr167);
        	        binary_noparent_expr2=binary_noparent_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_exprEx;
        	        }


        	        {

        	            	   val= 
        	            binary_noparent_expr2
        	            ;

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:89:6: binary_parent_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_binary_parent_expr_in_binary_expr175);
        	        binary_parent_expr3=binary_parent_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_exprEx;
        	        }


        	        {

        	            	   val= 
        	            binary_parent_expr3
        	            ;

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulebinary_exprEx; /* Prevent compiler warnings */
    rulebinary_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end binary_expr */

/**
 * $ANTLR start binary_noparent_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:93:1: binary_noparent_expr returns [BaseExpression* val] : (b1= unary_expr ) o= operand_expr b2= unary_expr ;
 */
static BaseExpression*
binary_noparent_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* b1;
    #undef	RETURN_TYPE_b1
    #define	RETURN_TYPE_b1 BaseExpression*

    filter_expressionParser_operand_expr_return o;
    #undef	RETURN_TYPE_o
    #define	RETURN_TYPE_o filter_expressionParser_operand_expr_return

    BaseExpression* b2;
    #undef	RETURN_TYPE_b2
    #define	RETURN_TYPE_b2 BaseExpression*

    /* Initialize rule variables
     */


    FILTER_OPERATORS oper;
    BinaryExpression* result = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:101:2: ( (b1= unary_expr ) o= operand_expr b2= unary_expr )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:102:4: (b1= unary_expr ) o= operand_expr b2= unary_expr
        {
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:102:4: (b1= unary_expr )
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:102:5: b1= unary_expr
            {
                FOLLOWPUSH(FOLLOW_unary_expr_in_binary_noparent_expr208);
                b1=unary_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebinary_noparent_exprEx;
                }


            }


            FOLLOWPUSH(FOLLOW_operand_expr_in_binary_noparent_expr214);
            o=operand_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebinary_noparent_exprEx;
            }


            FOLLOWPUSH(FOLLOW_unary_expr_in_binary_noparent_expr218);
            b2=unary_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebinary_noparent_exprEx;
            }


            {

                  	      oper = parseFilterOperator((char*)(STRSTREAM->toStringTT(STRSTREAM, o.start, o.stop))
                ->chars);
                	      result = new BinaryExpression(oper);
                	      result->push(b1
                );
                	      result->push(b2
                );
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulebinary_noparent_exprEx; /* Prevent compiler warnings */
    rulebinary_noparent_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                       val= result;


                }
            }


    return val;
}
/* $ANTLR end binary_noparent_expr */

/**
 * $ANTLR start binary_parent_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:109:1: binary_parent_expr returns [BaseExpression* val] : LPAREN binary_expr RPAREN ;
 */
static BaseExpression*
binary_parent_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* binary_expr4;
    #undef	RETURN_TYPE_binary_expr4
    #define	RETURN_TYPE_binary_expr4 BaseExpression*

    /* Initialize rule variables
     */

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:110:2: ( LPAREN binary_expr RPAREN )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:110:4: LPAREN binary_expr RPAREN
        {
             MATCHT(LPAREN, &FOLLOW_LPAREN_in_binary_parent_expr234);
            if  (HASEXCEPTION())
            {
                goto rulebinary_parent_exprEx;
            }


            FOLLOWPUSH(FOLLOW_binary_expr_in_binary_parent_expr236);
            binary_expr4=binary_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebinary_parent_exprEx;
            }


             MATCHT(RPAREN, &FOLLOW_RPAREN_in_binary_parent_expr238);
            if  (HASEXCEPTION())
            {
                goto rulebinary_parent_exprEx;
            }


            {

                	val= 
                binary_expr4
                ;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulebinary_parent_exprEx; /* Prevent compiler warnings */
    rulebinary_parent_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end binary_parent_expr */

/**
 * $ANTLR start unary_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:114:1: unary_expr returns [BaseExpression* val] : (c1= constant_expr |x1= xpath_expr ) ;
 */
static BaseExpression*
unary_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    BaseExpression* c1;
    #undef	RETURN_TYPE_c1
    #define	RETURN_TYPE_c1 BaseExpression*

    BaseExpression* x1;
    #undef	RETURN_TYPE_x1
    #define	RETURN_TYPE_x1 BaseExpression*

    /* Initialize rule variables
     */


    	     val = NULL;
    	
    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:2: ( (c1= constant_expr |x1= xpath_expr ) )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:4: (c1= constant_expr |x1= xpath_expr )
        {
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:4: (c1= constant_expr |x1= xpath_expr )
            {
                int alt6=2;
                switch ( LA(1) )
                {
                case INT:
                case STRING:
                	{
                		alt6=1;
                	}
                    break;
                case XPATH:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 6;
                    EXCEPTION->state        = 0;


                    goto ruleunary_exprEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:118:5: c1= constant_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_constant_expr_in_unary_expr263);
            	        c1=constant_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	        {

            	            	        val= c1;

            	            	
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:120:6: x1= xpath_expr
            	    {
            	        FOLLOWPUSH(FOLLOW_xpath_expr_in_unary_expr271);
            	        x1=xpath_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleunary_exprEx;
            	        }


            	        {

            	            	        val= x1;

            	            	
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunary_exprEx; /* Prevent compiler warnings */
    ruleunary_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end unary_expr */

/**
 * $ANTLR start xpath_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:124:1: xpath_expr returns [BaseExpression* val] : XPATH ;
 */
static BaseExpression*
xpath_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    pANTLR3_COMMON_TOKEN    XPATH5;

    /* Initialize rule variables
     */

    XPATH5       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:125:2: ( XPATH )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:125:4: XPATH
        {
            XPATH5 = (pANTLR3_COMMON_TOKEN) MATCHT(XPATH, &FOLLOW_XPATH_in_xpath_expr288);
            if  (HASEXCEPTION())
            {
                goto rulexpath_exprEx;
            }


            {

                	     char* text = (char*)(XPATH5->getText(XPATH5))->chars;
                	     SimpleExpression* result = new SimpleExpression(text);
                	     
                val= result;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulexpath_exprEx; /* Prevent compiler warnings */
    rulexpath_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end xpath_expr */

/**
 * $ANTLR start constant_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:131:1: constant_expr returns [BaseExpression* val] : ( INT | STRING ) ;
 */
static BaseExpression*
constant_expr(pfilter_expressionParser ctx)
{
    BaseExpression* val;


    pANTLR3_COMMON_TOKEN    INT6;
    pANTLR3_COMMON_TOKEN    STRING7;

    /* Initialize rule variables
     */

    INT6       = NULL;
    STRING7       = NULL;

    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:2: ( ( INT | STRING ) )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:4: ( INT | STRING )
        {
            // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:4: ( INT | STRING )
            {
                int alt7=2;
                switch ( LA(1) )
                {
                case INT:
                	{
                		alt7=1;
                	}
                    break;
                case STRING:
                	{
                		alt7=2;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 7;
                    EXCEPTION->state        = 0;


                    goto ruleconstant_exprEx;

                }

                switch (alt7)
                {
            	case 1:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:132:5: INT
            	    {
            	        INT6 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_constant_expr304);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstant_exprEx;
            	        }


            	        {

            	            	    int i = atoi((char*)(INT6->getText(INT6))->chars);
            	            	    
            	            val= new ConstantExpression(i);

            	            	
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/cross/workspace/djondb/db/grammars/filter_expression.g:136:6: STRING
            	    {
            	        STRING7 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_constant_expr311);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstant_exprEx;
            	        }


            	        {

            	            	    char* ptext = (char*)(STRING7->getText(STRING7))->chars;
            	            	    char* text = (char*)malloc(strlen(ptext) - 1);
            	            	    memset(text, 0, strlen(ptext) - 1);
            	            	    memcpy(text, ptext + 1, strlen(ptext) - 2);
            	            	    
            	            	    
            	            val= new ConstantExpression(text);

            	            	    free (text);
            	            	
            	        }


            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleconstant_exprEx; /* Prevent compiler warnings */
    ruleconstant_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return val;
}
/* $ANTLR end constant_expr */

/**
 * $ANTLR start operand_expr
 * /home/cross/workspace/djondb/db/grammars/filter_expression.g:146:1: operand_expr returns [BaseExpression* val] : OPER ;
 */
static filter_expressionParser_operand_expr_return
operand_expr(pfilter_expressionParser ctx)
{
    filter_expressionParser_operand_expr_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:147:2: ( OPER )
        // /home/cross/workspace/djondb/db/grammars/filter_expression.g:147:4: OPER
        {
             MATCHT(OPER, &FOLLOW_OPER_in_operand_expr326);
            if  (HASEXCEPTION())
            {
                goto ruleoperand_exprEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoperand_exprEx; /* Prevent compiler warnings */
    ruleoperand_exprEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end operand_expr */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
