/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g
 *     -                            On : 2013-05-25 21:32:06
 *     -                for the parser : bson_grammarParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "bson_grammarParser.h"

   
const int TYPE_INT = 0;
const int TYPE_FLOAT = 1;
const int TYPE_PTRCHAR = 2;
const int TYPE_BSON = 3;
const int TYPE_BSONARRAY = 4;
const int TYPE_BOOL = 5;
const int TYPE_LONG = 6;

struct element_value {
    int type;
    void* value;
};

BSONObj* currentObj;

void addElement(char* field, struct element_value val) {
     switch (val.type) {
         case TYPE_BOOL:
                    currentObj->add(field, *((bool*)val.value));
                    delete (bool*)val.value;
                    break;
         case TYPE_INT:
                    currentObj->add(field, *((__int32*)val.value));
                    delete (__int32*)val.value;
                    break;
         case TYPE_LONG:
                    currentObj->add(field, *((__int64*)val.value));
                    delete (__int64*)val.value;
                    break;
         case TYPE_FLOAT:
                    currentObj->add(field, *((double*)val.value));
                    delete (double*)val.value;
                    break;
         case TYPE_PTRCHAR:
                    currentObj->add(field, (char*)val.value);
                    free(val.value);
                    break;
         case TYPE_BSON:
                    currentObj->add(field, *(BSONObj*)val.value);
                    delete (BSONObj*)val.value;
                    break;
         case TYPE_BSONARRAY:
                    currentObj->add(field, *(BSONArrayObj*)val.value);
                    delete (BSONArrayObj*)val.value;
                    break;
         default:
            throw "Unsupported type";
     }
}

static void displayRecognitionErrorNew  (pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_UINT8 * tokenNames)
{ 
/*
    switch (recognizer->state->exception->type) {
    	case ANTLR3_UNWANTED_TOKEN_EXCEPTION:
		break;
	default:
		throw ParseException(1, (char*)recognizer->state->exception->message);
    }
    */
}
static void reportOverride(pANTLR3_BASE_RECOGNIZER recognizer) {
}

/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pbson_grammarParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pbson_grammarParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pbson_grammarParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pbson_grammarParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   bson_grammarParserTokenNames[22+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FALSE",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LBRAK",
        (pANTLR3_UINT8) "LBRAN",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "RBRAK",
        (pANTLR3_UINT8) "RBRAN",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "TRUE",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "WS"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 BSONObj*
	start_point    (pbson_grammarParser ctx);
static 
 struct element_value
	json_const    (pbson_grammarParser ctx);
static 
 BSONArrayObj*
	json_array_expr    (pbson_grammarParser ctx);
static 
 BSONObj*
	json_expr    (pbson_grammarParser ctx);
static 
 char*
	json_fieldname    (pbson_grammarParser ctx);
static void	bson_grammarParserFree(pbson_grammarParser ctx);
static void     bson_grammarParserReset (pbson_grammarParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new bson_grammarParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pbson_grammarParser
bson_grammarParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return bson_grammarParserNewSSD(instream, NULL);
}

/** \brief Create a new bson_grammarParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pbson_grammarParser
bson_grammarParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pbson_grammarParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pbson_grammarParser) ANTLR3_CALLOC(1, sizeof(bson_grammarParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in bson_grammarParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our bson_grammarParser interface
     */
    ctx->start_point	= start_point;
    ctx->json_const	= json_const;
    ctx->json_array_expr	= json_array_expr;
    ctx->json_expr	= json_expr;
    ctx->json_fieldname	= json_fieldname;
    ctx->free			= bson_grammarParserFree;
    ctx->reset			= bson_grammarParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */


     RECOGNIZER->displayRecognitionError       = displayRecognitionErrorNew;
    // RECOGNIZER->reportError = reportOverride;
    //  RECOGNIZER->antlr3RecognitionExceptionNew = antlr3RecognitionExceptionNewNew;
    //  RECOGNIZER->mismatch                      = mismatchNew;

    /* Install the token table
     */
    PSRSTATE->tokenNames   = bson_grammarParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
bson_grammarParserReset (pbson_grammarParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 bson_grammarParserFree(pbson_grammarParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return bson_grammarParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_start_point69  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_start_point69_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_start_point69	= { FOLLOW_json_expr_in_start_point69_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_start_point71  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_start_point71_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_start_point71	= { FOLLOW_EOF_in_start_point71_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_json_const88  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_json_const88_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_json_const88	= { FOLLOW_STRING_in_json_const88_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_json_const97  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_json_const97_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_json_const97	= { FOLLOW_NUMBER_in_json_const97_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_json_const106  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_json_const106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_json_const106	= { FOLLOW_FLOAT_in_json_const106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TRUE_in_json_const115  */
static	ANTLR3_BITWORD FOLLOW_TRUE_in_json_const115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_TRUE_in_json_const115	= { FOLLOW_TRUE_in_json_const115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FALSE_in_json_const124  */
static	ANTLR3_BITWORD FOLLOW_FALSE_in_json_const124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FALSE_in_json_const124	= { FOLLOW_FALSE_in_json_const124_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_array_expr_in_json_const136  */
static	ANTLR3_BITWORD FOLLOW_json_array_expr_in_json_const136_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_json_array_expr_in_json_const136	= { FOLLOW_json_array_expr_in_json_const136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_json_const142  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_json_const142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_json_const142	= { FOLLOW_json_expr_in_json_const142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRAK_in_json_array_expr163  */
static	ANTLR3_BITWORD FOLLOW_LBRAK_in_json_array_expr163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRAK_in_json_array_expr163	= { FOLLOW_LBRAK_in_json_array_expr163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_json_array_expr167  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_json_array_expr167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040020) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_json_array_expr167	= { FOLLOW_json_expr_in_json_array_expr167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_json_array_expr175  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_json_array_expr175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_json_array_expr175	= { FOLLOW_COMMA_in_json_array_expr175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_expr_in_json_array_expr179  */
static	ANTLR3_BITWORD FOLLOW_json_expr_in_json_array_expr179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040020) };
static  ANTLR3_BITSET_LIST FOLLOW_json_expr_in_json_array_expr179	= { FOLLOW_json_expr_in_json_array_expr179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRAK_in_json_array_expr188  */
static	ANTLR3_BITWORD FOLLOW_RBRAK_in_json_array_expr188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRAK_in_json_array_expr188	= { FOLLOW_RBRAK_in_json_array_expr188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRAN_in_json_expr206  */
static	ANTLR3_BITWORD FOLLOW_LBRAN_in_json_expr206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000481020) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRAN_in_json_expr206	= { FOLLOW_LBRAN_in_json_expr206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_fieldname_in_json_expr211  */
static	ANTLR3_BITWORD FOLLOW_json_fieldname_in_json_expr211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_json_fieldname_in_json_expr211	= { FOLLOW_json_fieldname_in_json_expr211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_json_expr213  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_json_expr213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000C16600) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_json_expr213	= { FOLLOW_COLON_in_json_expr213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_const_in_json_expr217  */
static	ANTLR3_BITWORD FOLLOW_json_const_in_json_expr217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080020) };
static  ANTLR3_BITSET_LIST FOLLOW_json_const_in_json_expr217	= { FOLLOW_json_const_in_json_expr217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_json_expr228  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_json_expr228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000401000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_json_expr228	= { FOLLOW_COMMA_in_json_expr228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_fieldname_in_json_expr232  */
static	ANTLR3_BITWORD FOLLOW_json_fieldname_in_json_expr232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_json_fieldname_in_json_expr232	= { FOLLOW_json_fieldname_in_json_expr232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_json_expr234  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_json_expr234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000C16600) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_json_expr234	= { FOLLOW_COLON_in_json_expr234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_json_const_in_json_expr238  */
static	ANTLR3_BITWORD FOLLOW_json_const_in_json_expr238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080020) };
static  ANTLR3_BITSET_LIST FOLLOW_json_const_in_json_expr238	= { FOLLOW_json_const_in_json_expr238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRAN_in_json_expr269  */
static	ANTLR3_BITWORD FOLLOW_RBRAN_in_json_expr269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRAN_in_json_expr269	= { FOLLOW_RBRAN_in_json_expr269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_json_fieldname282  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_json_fieldname282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_json_fieldname282	= { FOLLOW_STRING_in_json_fieldname282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_json_fieldname289  */
static	ANTLR3_BITWORD FOLLOW_ID_in_json_fieldname289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_json_fieldname289	= { FOLLOW_ID_in_json_fieldname289_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start start_point
 * /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:98:1: start_point returns [BSONObj* val] : json_expr EOF ;
 */
static BSONObj*
start_point(pbson_grammarParser ctx)
{
    BSONObj* val;


    BSONObj* json_expr1;
    #undef	RETURN_TYPE_json_expr1
    #define	RETURN_TYPE_json_expr1 BSONObj*

    /* Initialize rule variables
     */


    	
    {
        // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:100:4: ( json_expr EOF )
        // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:100:6: json_expr EOF
        {
            FOLLOWPUSH(FOLLOW_json_expr_in_start_point69);
            json_expr1=json_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }


             MATCHT(EOF, &FOLLOW_EOF_in_start_point71);
            if  (HASEXCEPTION())
            {
                goto rulestart_pointEx;
            }


            {

                	    val= 
                json_expr1
                ;

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestart_pointEx; /* Prevent compiler warnings */
    rulestart_pointEx: ;



    return val;
}
/* $ANTLR end start_point */

/**
 * $ANTLR start json_const
 * /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:105:1: json_const returns [struct element_value val] : ( STRING | NUMBER | FLOAT | ( TRUE | FALSE ) | json_array_expr | json_expr );
 */
static struct element_value
json_const(pbson_grammarParser ctx)
{
    struct element_value val;


    pANTLR3_COMMON_TOKEN    STRING2;
    pANTLR3_COMMON_TOKEN    NUMBER3;
    pANTLR3_COMMON_TOKEN    FLOAT4;
    BSONArrayObj* json_array_expr5;
    #undef	RETURN_TYPE_json_array_expr5
    #define	RETURN_TYPE_json_array_expr5 BSONArrayObj*

    BSONObj* json_expr6;
    #undef	RETURN_TYPE_json_expr6
    #define	RETURN_TYPE_json_expr6 BSONObj*

    /* Initialize rule variables
     */

    STRING2       = NULL;
    NUMBER3       = NULL;
    FLOAT4       = NULL;

    {
        {
            //  /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:106:2: ( STRING | NUMBER | FLOAT | ( TRUE | FALSE ) | json_array_expr | json_expr )

            ANTLR3_UINT32 alt2;

            alt2=6;

            switch ( LA(1) )
            {
            case STRING:
            	{
            		alt2=1;
            	}
                break;
            case NUMBER:
            	{
            		alt2=2;
            	}
                break;
            case FLOAT:
            	{
            		alt2=3;
            	}
                break;
            case FALSE:
            case TRUE:
            	{
            		alt2=4;
            	}
                break;
            case LBRAK:
            	{
            		alt2=5;
            	}
                break;
            case LBRAN:
            	{
            		alt2=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulejson_constEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:106:4: STRING
        	    {
        	        STRING2 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_json_const88);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	        {

        	            	    val
        	            .type = TYPE_PTRCHAR;
        	            	    char* ptext = (char*)(STRING2->getText(STRING2))->chars;
        	            	    char* text = (char*)malloc(strlen(ptext) - 1);
        	            	    memset(text, 0, strlen(ptext) - 1);
        	            	    memcpy(text, ptext + 1, strlen(ptext) - 2);
        	            	    
        	            	    
        	            val
        	            .value = text;
        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:116:4: NUMBER
        	    {
        	        NUMBER3 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_json_const97);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	        {

        	            		 // tries the maximum allowed value, then downsize it to the correct type
        	            #ifdef WINDOWS
        	            		__int64 d = (__int64)_atoi64((char*)(NUMBER3->getText(NUMBER3))->chars);
        	            #else
        	                  __int64 d = atoll((char*)(NUMBER3->getText(NUMBER3))->chars);
        	            #endif
        	            	    if (d <= INT_MAX) {
        	            	    	  
        	            val
        	            .type = TYPE_INT;
        	            	          val
        	            .value = new __int32((__int32)d);
        	            	    } else {
        	            	    	  val
        	            .type = TYPE_LONG;
        	            	          val
        	            .value = new __int64(d);
        	            	    }
        	            	
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:132:4: FLOAT
        	    {
        	        FLOAT4 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_json_const106);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	        {

        	            	    val
        	            .type = TYPE_FLOAT;
        	            		 // tries the maximum allowed value, then downsize it to the correct type
        	                  	    val
        	            .value = new double(atof((char*)(FLOAT4->getText(FLOAT4))->chars));
        	            	
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:138:4: ( TRUE | FALSE )
        	    {
        	        // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:138:4: ( TRUE | FALSE )
        	        {
        	            int alt1=2;
        	            switch ( LA(1) )
        	            {
        	            case TRUE:
        	            	{
        	            		alt1=1;
        	            	}
        	                break;
        	            case FALSE:
        	            	{
        	            		alt1=2;
        	            	}
        	                break;

        	            default:
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 1;
        	                EXCEPTION->state        = 0;


        	                goto rulejson_constEx;

        	            }

        	            switch (alt1)
        	            {
        	        	case 1:
        	        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:138:5: TRUE
        	        	    {
        	        	         MATCHT(TRUE, &FOLLOW_TRUE_in_json_const115);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulejson_constEx;
        	        	        }


        	        	        {

        	        	            	    val
        	        	            .type = TYPE_BOOL;
        	        	            	    val
        	        	            .value = new bool(true);
        	        	            	
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:143:4: FALSE
        	        	    {
        	        	         MATCHT(FALSE, &FOLLOW_FALSE_in_json_const124);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulejson_constEx;
        	        	        }


        	        	        {

        	        	            	    val
        	        	            .type = TYPE_BOOL;
        	        	            	    val
        	        	            .value = new bool(false);
        	        	            	
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:149:4: json_array_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_json_array_expr_in_json_const136);
        	        json_array_expr5=json_array_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	        {

        	            	    val
        	            .type = TYPE_BSONARRAY;
        	            	    val
        	            .value = json_array_expr5
        	            ;
        	            	
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:152:6: json_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_json_expr_in_json_const142);
        	        json_expr6=json_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_constEx;
        	        }


        	        {

        	            	    val
        	            .type = TYPE_BSON;
        	            	    val
        	            .value = json_expr6
        	            ;
        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulejson_constEx; /* Prevent compiler warnings */
    rulejson_constEx: ;



    return val;
}
/* $ANTLR end json_const */

/**
 * $ANTLR start json_array_expr
 * /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:157:1: json_array_expr returns [BSONArrayObj* val] : LBRAK j1= json_expr ( COMMA j2= json_expr )* RBRAK ;
 */
static BSONArrayObj*
json_array_expr(pbson_grammarParser ctx)
{
    BSONArrayObj* val;


    BSONObj* j1;
    #undef	RETURN_TYPE_j1
    #define	RETURN_TYPE_j1 BSONObj*

    BSONObj* j2;
    #undef	RETURN_TYPE_j2
    #define	RETURN_TYPE_j2 BSONObj*

    /* Initialize rule variables
     */


        BSONArrayObj* obj = new BSONArrayObj();
        val= obj;


    {
        // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:162:2: ( LBRAK j1= json_expr ( COMMA j2= json_expr )* RBRAK )
        // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:162:4: LBRAK j1= json_expr ( COMMA j2= json_expr )* RBRAK
        {
             MATCHT(LBRAK, &FOLLOW_LBRAK_in_json_array_expr163);
            if  (HASEXCEPTION())
            {
                goto rulejson_array_exprEx;
            }


            FOLLOWPUSH(FOLLOW_json_expr_in_json_array_expr167);
            j1=json_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulejson_array_exprEx;
            }


            {

                	   obj->add(*j1
                );
                	
            }


            // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:166:2: ( COMMA j2= json_expr )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:166:3: COMMA j2= json_expr
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_json_array_expr175);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_array_exprEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_json_expr_in_json_array_expr179);
            	        j2=json_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_array_exprEx;
            	        }


            	        {

            	            	   obj->add(*j2
            	            );
            	            	
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             MATCHT(RBRAK, &FOLLOW_RBRAK_in_json_array_expr188);
            if  (HASEXCEPTION())
            {
                goto rulejson_array_exprEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulejson_array_exprEx; /* Prevent compiler warnings */
    rulejson_array_exprEx: ;



    return val;
}
/* $ANTLR end json_array_expr */

/**
 * $ANTLR start json_expr
 * /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:172:1: json_expr returns [BSONObj* val] : LBRAN (n1= json_fieldname COLON v1= json_const )? ( COMMA n2= json_fieldname COLON v2= json_const )* RBRAN ;
 */
static BSONObj*
json_expr(pbson_grammarParser ctx)
{
    BSONObj* val;


    char* n1;
    #undef	RETURN_TYPE_n1
    #define	RETURN_TYPE_n1 char*

    struct element_value v1;
    #undef	RETURN_TYPE_v1
    #define	RETURN_TYPE_v1 struct element_value

    char* n2;
    #undef	RETURN_TYPE_n2
    #define	RETURN_TYPE_n2 char*

    struct element_value v2;
    #undef	RETURN_TYPE_v2
    #define	RETURN_TYPE_v2 struct element_value

    /* Initialize rule variables
     */


            BSONObj* previous = currentObj;
    	BSONObj* obj = new BSONObj();
    	val= obj;

    	currentObj = obj;

    {
        // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:179:3: ( LBRAN (n1= json_fieldname COLON v1= json_const )? ( COMMA n2= json_fieldname COLON v2= json_const )* RBRAN )
        // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:179:3: LBRAN (n1= json_fieldname COLON v1= json_const )? ( COMMA n2= json_fieldname COLON v2= json_const )* RBRAN
        {
             MATCHT(LBRAN, &FOLLOW_LBRAN_in_json_expr206);
            if  (HASEXCEPTION())
            {
                goto rulejson_exprEx;
            }


            // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:179:9: (n1= json_fieldname COLON v1= json_const )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case ID:
                    case STRING:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:179:10: n1= json_fieldname COLON v1= json_const
            	    {
            	        FOLLOWPUSH(FOLLOW_json_fieldname_in_json_expr211);
            	        n1=json_fieldname(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	         MATCHT(COLON, &FOLLOW_COLON_in_json_expr213);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_json_const_in_json_expr217);
            	        v1=json_const(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	        {

            	                  addElement(n1
            	            , v1
            	            );

            	        }


            	    }
            	    break;

                }
            }

            // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:184:4: ( COMMA n2= json_fieldname COLON v2= json_const )*

            for (;;)
            {
                int alt5=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:184:5: COMMA n2= json_fieldname COLON v2= json_const
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_json_expr228);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_json_fieldname_in_json_expr232);
            	        n2=json_fieldname(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	         MATCHT(COLON, &FOLLOW_COLON_in_json_expr234);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_json_const_in_json_expr238);
            	        v2=json_const(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejson_exprEx;
            	        }


            	        {

            	                  addElement(n2
            	            , v2
            	            );

            	        }


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


            {

                    	currentObj = previous;

            }


             MATCHT(RBRAN, &FOLLOW_RBRAN_in_json_expr269);
            if  (HASEXCEPTION())
            {
                goto rulejson_exprEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulejson_exprEx; /* Prevent compiler warnings */
    rulejson_exprEx: ;



    return val;
}
/* $ANTLR end json_expr */

/**
 * $ANTLR start json_fieldname
 * /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:194:1: json_fieldname returns [char* val] : ( STRING | ID );
 */
static char*
json_fieldname(pbson_grammarParser ctx)
{
    char* val;


    pANTLR3_COMMON_TOKEN    STRING7;
    pANTLR3_COMMON_TOKEN    ID8;

    /* Initialize rule variables
     */

    STRING7       = NULL;
    ID8       = NULL;

    {
        {
            //  /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:195:2: ( STRING | ID )

            ANTLR3_UINT32 alt6;

            alt6=2;

            switch ( LA(1) )
            {
            case STRING:
            	{
            		alt6=1;
            	}
                break;
            case ID:
            	{
            		alt6=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto rulejson_fieldnameEx;

            }

            switch (alt6)
            {
        	case 1:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:195:4: STRING
        	    {
        	        STRING7 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_json_fieldname282);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_fieldnameEx;
        	        }


        	        {

        	            	    char* ptext = (char*)(STRING7->getText(STRING7))->chars;
        	            	    char* text = (char*)malloc(strlen(ptext) - 1);
        	            	    memset(text, 0, strlen(ptext) - 1);
        	            	    memcpy(text, ptext + 1, strlen(ptext) - 2);
        	            	    
        	            	    
        	            val= text;

        	            	
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/cross/workspace/djondb_tx/db/grammars/bson_grammar.g:203:5: ID
        	    {
        	        ID8 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_json_fieldname289);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulejson_fieldnameEx;
        	        }


        	        {

        	            	    char* ptext = (char*)(ID8->getText(ID8))->chars;
        	            	    char* text = (char*)malloc(strlen(ptext) + 1);
        	            	    memset(text, 0, strlen(ptext) + 1);
        	            	    memcpy(text, ptext, strlen(ptext));
        	            	    
        	            	    
        	            val= text;

        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulejson_fieldnameEx; /* Prevent compiler warnings */
    rulejson_fieldnameEx: ;



    return val;
}
/* $ANTLR end json_fieldname */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
