format 66
"Tester" // jaguar::jaguar-server::Tester
  revision 1
  modified_by 2 "cross"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  classview 129410 "Tester"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 136706 "NetworkTestSuite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135298 // <generalisation>
	relation 135298 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135298 // <generalisation>
	  b parent class_ref 136834 // typedef5
      end

      operation 160642 "NetworkTestSuite"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
        TEST_ADD(NetworkTestSuite::sendreceive);
    };
"
	
	
	
	
      end

      operation 160770 "sendreceive"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        int sockfd, portno, n;
        struct sockaddr_in serv_addr;
        struct hostent *server;

        portno = 1043;
        sockfd = socket(AF_INET, SOCK_STREAM, 0);
        if (sockfd < 0)
            error(\"ERROR opening socket\");
        server = gethostbyname(\"localhost\");
        if (server == NULL)
        {
            fprintf(stderr, \"ERROR, no such host\\n\");
            exit(0);
        }
        bzero((char *) & serv_addr, sizeof (serv_addr));
        serv_addr.sin_family = AF_INET;
        bcopy((char *) server->h_addr,
              (char *) & serv_addr.sin_addr.s_addr,
              server->h_length);
        serv_addr.sin_port = htons(portno);
        if (connect(sockfd, (sockaddr *)  &serv_addr, sizeof (serv_addr)) < 0)
            TEST_FAIL(\"ERROR connecting\");
//    long type = 2;
//    n = write(sockfd, (char*)&type, sizeof(type));
//
        char buffer[] = \"0001ACT 03NEWDEFI011FFFF\";
        n = write(sockfd, buffer, strlen(buffer));
        if (n < 0)
            TEST_FAIL(\"ERROR writing to socket\");
        char rec[256];
        bzero(rec, 256);
        n = read(sockfd, rec, 255);
        if (n < 0)
            TEST_FAIL(\"ERROR reading from socket\");
        cout << rec << endl;
        close(sockfd);
    };
"
	
	
	
	
      end
    end

    class 136834 "typedef5"
      visibility package stereotype "typedef" explicit_base_type "Test::Suite"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 136962 "CommonTestSuite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135426 // <generalisation>
	relation 135426 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135426 // <generalisation>
	  b parent class_ref 136834 // typedef5
      end

      operation 160898 "CommonTestSuite"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
        TEST_ADD(CommonTestSuite::testStrtrim);
        TEST_ADD(CommonTestSuite::testStringTrim);
    };
"
	
	
	
	
      end

      operation 161026 "testStrtrim"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        char* s1 = \"test \";
        char* se = \"test\";
        const char* sr = strtrim(s1);
        TEST_ASSERT(strcmp(se, sr) == 0);

        char* s2 = \"  test       \";
        se = \"  test\";
        sr = strtrim(s2);
        TEST_ASSERT(strcmp(se, sr) == 0);

        char* s3 = \"test\";
        se = \"test\";
        sr = strtrim(s3);
        TEST_ASSERT(strcmp(se, sr) == 0);
    };
"
	
	
	
	
      end

      operation 161154 "testStringTrim"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        string s1 (\"test \");
        string se1 (\"test\");
        trim(&s1);
        TEST_ASSERT(s1.compare(se1) == 0);

        string s2 (\"  test     \");
        string se2 (\"  test\");
        trim(&s2);
        TEST_ASSERT(s2.compare(se2) == 0);

    };
"
	
	
	
	
      end
    end

    class 137090 "TestDB"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 135554 // <generalisation>
	relation 135554 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135554 // <generalisation>
	  b parent class_ref 136834 // typedef5
      end

      operation 161282 "TestDB"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
        TEST_ADD(TestDB::testConnection);
        TEST_ADD(TestDB::testResultSet);
        TEST_ADD(TestDB::testUpdate);
    };
"
	
	
	
	
      end

      operation 161410 "testConnection"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ConnectionPool* pool = new ConnectionPool();
        try
        {
            Connection* con = pool->getConnection(\"mysql;localhost;3304;mangos\", \"root\", \"cross2000\");
            con->close();
        }
        catch (DBException e)
        {
            TEST_FAIL(e.what());
        }
    };
"
	
	
	
	
      end

      operation 161538 "testResultSet"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ConnectionPool* pool = new ConnectionPool();
        Connection* con = NULL;
        ResultSet* rs = NULL;
        try
        {
            con = pool->getConnection(\"mysql;localhost;3304;mangos\", \"root\", \"cross2000\");
            rs = con->executeQuery(\"SELECT name, modelid_A, minlevel, speed, scriptname FROM creature_template limit 0, 10\");
            // char, medium int, tiny, float, smallint,integer,null
            int x = 0;
            cout << \"Name\\t\\t\\tmodelid\\tminlevel\\tspeed\\tscriptname\" << endl;
            while ((*rs)++)
            {
                string* name = (string*)rs->get(0);
                int* modelid_A = (int*)rs->get(1);
                int* minlevel = (int*)rs->get(2);
                float* speed = (float*)rs->get(3);
                string* scriptname = (string*)rs->get(4);
                cout << *((string*)name) << \"\\t\\t\\t\" << *modelid_A << \"\\t\" << *minlevel << \"\\t\" << *speed << \"\\t\" << *scriptname << endl;
            }
        }
        catch (DBException e)
        {
            TEST_FAIL(e.what());
        }
        if (rs)
            rs->close();
        if (con)
            con->close();
    };
"
	
	
	
	
      end

      operation 161666 "testUpdate"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ConnectionPool* pool = new ConnectionPool();
        try
        {
            Connection* con = pool->getConnection(\"mysql;localhost;3304;mangos\", \"root\", \"cross2000\");
            con->executeUpdate(\"CREATE TABLE test ( name int)\");
            con->executeUpdate(\"INSERT INTO test (name) values ('test')\");
            con->executeUpdate(\"DROP TABLE test\");
            con->close();
        }
        catch (DBException& e)
        {
            TEST_FAIL(e.what());
            return;
        }
    };
"
	
	
	
	
      end
    end

    class 137218 "TestEnum"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 144258 "A"
	public type class_ref 137218 // TestEnum
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144386 "B"
	public type class_ref 137218 // TestEnum
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144514 "C"
	public type class_ref 137218 // TestEnum
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 129794 "Tester"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 130306 "typedef5"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 136834 // typedef5
      end
    end

    artifact 130434 "NetworkTestSuite"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 136706 // NetworkTestSuite
      end
    end

    artifact 130562 "CommonTestSuite"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 136962 // CommonTestSuite
      end
    end

    artifact 130690 "TestDB"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137090 // TestDB
      end
    end

    artifact 130818 "TestEnum"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137218 // TestEnum
      end
    end

    artifact 130946 "main"
      stereotype "source"
      cpp_src "//
// *
// 

int main(int argc, char** argv)
{
    try
    {
//        cout << t << endl;
        // Demonstrates the ability to use multiple test suites
        //
        Test::Suite ts;
        ts.add(auto_ptr<Test::Suite>(new CommonTestSuite));
        ts.add(auto_ptr<Test::Suite>(new TestDB));
        ts.add(auto_ptr<Test::Suite>(new NetworkTestSuite));

        // Run the tests
        //
        auto_ptr<Test::Output> output(cmdline(argc, argv));
        ts.run(*output, true);

        Test::HtmlOutput* const html = dynamic_cast<Test::HtmlOutput*>(output.get());
        if (html)
            html->generate(cout, true, \"Jaguar tests\");
    }
    catch (...)
    {
        cout << \"unexpected exception encountered\\n\";
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
"
      associated_classes
      end
    end
  end
end
